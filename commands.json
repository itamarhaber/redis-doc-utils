{
    "ACL CAT": {
        "summary": "List the ACL categories or the commands inside a category",
        "complexity": "O(1) since the categories and commands are a fixed set.",
        "group": "server",
        "since": "6.0.0",
        "arity": -2,
        "container": "ACL",
        "function": "aclCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ],
        "arguments": [
            {
                "name": "categoryname",
                "type": "string",
                "value": "categoryname",
                "optional": true
            }
        ]
    },
    "ACL DELUSER": {
        "summary": "Remove the specified ACL users and the associated rules",
        "complexity": "O(1) amortized time considering the typical user.",
        "group": "server",
        "since": "6.0.0",
        "arity": -3,
        "container": "ACL",
        "function": "aclCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ],
        "arguments": [
            {
                "name": "username",
                "type": "string",
                "value": "username",
                "multiple": true
            }
        ]
    },
    "ACL GENPASS": {
        "summary": "Generate a pseudorandom secure password to use for ACL users",
        "complexity": "O(1)",
        "group": "server",
        "since": "6.0.0",
        "arity": -2,
        "container": "ACL",
        "function": "aclCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ],
        "arguments": [
            {
                "name": "bits",
                "type": "integer",
                "value": "bits",
                "optional": true
            }
        ]
    },
    "ACL GETUSER": {
        "summary": "Get the rules for a specific ACL user",
        "complexity": "O(N). Where N is the number of password, command and pattern rules that the user has.",
        "group": "server",
        "since": "6.0.0",
        "arity": 3,
        "container": "ACL",
        "function": "aclCommand",
        "history": [
            [
                "6.2",
                "Added Pub/Sub channel patterns."
            ]
        ],
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ],
        "arguments": [
            {
                "name": "username",
                "type": "string",
                "value": "username"
            }
        ]
    },
    "ACL LIST": {
        "summary": "List the current ACL rules in ACL config file format",
        "complexity": "O(N). Where N is the number of configured users.",
        "group": "server",
        "since": "6.0.0",
        "arity": 2,
        "container": "ACL",
        "function": "aclCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ]
    },
    "ACL HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "server",
        "since": "6.0.0",
        "arity": 2,
        "container": "ACL",
        "function": "aclCommand",
        "command_flags": [
            "loading",
            "stale",
            "sentinel"
        ]
    },
    "ACL LOAD": {
        "summary": "Reload the ACLs from the configured ACL file",
        "complexity": "O(N). Where N is the number of configured users.",
        "group": "server",
        "since": "6.0.0",
        "arity": 2,
        "container": "ACL",
        "function": "aclCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ]
    },
    "ACL SAVE": {
        "summary": "Save the current ACL rules in the configured ACL file",
        "complexity": "O(N). Where N is the number of configured users.",
        "group": "server",
        "since": "6.0.0",
        "arity": 2,
        "container": "ACL",
        "function": "aclCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ]
    },
    "ACL LOG": {
        "summary": "List latest events denied because of ACLs in place",
        "complexity": "O(N) with N being the number of entries shown.",
        "group": "server",
        "since": "6.0.0",
        "arity": -2,
        "container": "ACL",
        "function": "aclCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ],
        "arguments": [
            {
                "name": "operation",
                "type": "oneof",
                "value": [
                    {
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    },
                    {
                        "name": "reset",
                        "type": "pure-token",
                        "token": "RESET"
                    }
                ],
                "optional": true
            }
        ]
    },
    "ACL SETUSER": {
        "summary": "Modify or create the rules for a specific ACL user",
        "complexity": "O(N). Where N is the number of rules provided.",
        "group": "server",
        "since": "6.0.0",
        "arity": -3,
        "container": "ACL",
        "function": "aclCommand",
        "history": [
            [
                "6.2",
                "Added Pub/Sub channel patterns."
            ]
        ],
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ],
        "arguments": [
            {
                "name": "username",
                "type": "string",
                "value": "username"
            },
            {
                "name": "rule",
                "type": "string",
                "value": "rule",
                "optional": true,
                "multiple": true
            }
        ]
    },
    "ACL WHOAMI": {
        "summary": "Return the name of the user associated to the current connection",
        "complexity": "O(1)",
        "group": "server",
        "since": "6.0.0",
        "arity": 2,
        "container": "ACL",
        "function": "aclCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ]
    },
    "ACL USERS": {
        "summary": "List the username of all the configured ACL rules",
        "complexity": "O(N). Where N is the number of configured users.",
        "group": "server",
        "since": "6.0.0",
        "arity": 2,
        "container": "ACL",
        "function": "aclCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ]
    },
    "ACL": {
        "summary": "A container for Access List Control commands ",
        "complexity": "Depends on subcommand.",
        "group": "server",
        "since": "6.0.0",
        "arity": -2,
        "command_flags": [
            "sentinel"
        ]
    },
    "APPEND": {
        "summary": "Append a value to a key",
        "complexity": "O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.",
        "group": "string",
        "since": "2.0.0",
        "arity": 3,
        "function": "appendCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "value",
                "type": "string",
                "value": "value"
            }
        ]
    },
    "AUTH": {
        "summary": "Authenticate to the server",
        "complexity": "O(N) where N is the number of passwords defined for the user",
        "group": "connection",
        "since": "1.0.0",
        "arity": -2,
        "function": "authCommand",
        "history": [
            [
                "6.0.0",
                "Added ACL style (username and password)."
            ]
        ],
        "command_flags": [
            "noscript",
            "loading",
            "stale",
            "fast",
            "no_auth",
            "sentinel"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "username",
                "type": "string",
                "value": "username",
                "optional": true
            },
            {
                "name": "password",
                "type": "string",
                "value": "password"
            }
        ]
    },
    "ASKING": {
        "summary": "Sent by cluster clients after an -ASK redirect",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 1,
        "function": "askingCommand",
        "command_flags": [
            "fast"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "BGREWRITEAOF": {
        "summary": "Asynchronously rewrite the append-only file",
        "complexity": "PATCH__TBD__55__",
        "group": "server",
        "since": "1.0.0",
        "arity": 1,
        "function": "bgrewriteaofCommand",
        "command_flags": [
            "admin",
            "noscript"
        ]
    },
    "BGSAVE": {
        "summary": "Asynchronously save the dataset to disk",
        "complexity": "PATCH__TBD__57__",
        "group": "server",
        "since": "1.0.0",
        "arity": -1,
        "function": "bgsaveCommand",
        "history": [
            [
                "3.2.2",
                "Added the `SCHEDULE` option."
            ]
        ],
        "command_flags": [
            "admin",
            "noscript"
        ],
        "arguments": [
            {
                "name": "schedule",
                "token": "SCHEDULE",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "BITCOUNT": {
        "summary": "Count set bits in a string",
        "complexity": "O(N)",
        "group": "bitmap",
        "since": "2.6.0",
        "arity": -2,
        "function": "bitcountCommand",
        "history": [
            [
                "7.0",
                "Added the `BYTE|BIT` option."
            ]
        ],
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "bitmap"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "index",
                "type": "block",
                "value": [
                    {
                        "name": "start",
                        "type": "integer",
                        "value": "start"
                    },
                    {
                        "name": "end",
                        "type": "integer",
                        "value": "end"
                    },
                    {
                        "name": "index_unit",
                        "type": "oneof",
                        "value": [
                            {
                                "name": "byte",
                                "type": "pure-token",
                                "token": "BYTE"
                            },
                            {
                                "name": "bit",
                                "type": "pure-token",
                                "token": "BIT"
                            }
                        ],
                        "optional": true
                    }
                ],
                "optional": true
            }
        ]
    },
    "BITFIELD": {
        "summary": "Perform arbitrary bitfield integer operations on strings",
        "complexity": "O(1) for each subcommand specified",
        "group": "bitmap",
        "since": "3.2.0",
        "arity": -2,
        "function": "bitfieldCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "bitmap"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "token": "GET",
                "name": "encoding_offset",
                "type": "block",
                "value": [
                    {
                        "name": "encoding",
                        "type": "string",
                        "value": "encoding"
                    },
                    {
                        "name": "offset",
                        "type": "integer",
                        "value": "offset"
                    }
                ],
                "optional": true
            },
            {
                "token": "SET",
                "name": "encoding_offset_value",
                "type": "block",
                "value": [
                    {
                        "name": "encoding",
                        "type": "string",
                        "value": "encoding"
                    },
                    {
                        "name": "offset",
                        "type": "integer",
                        "value": "offset"
                    },
                    {
                        "name": "value",
                        "type": "integer",
                        "value": "value"
                    }
                ],
                "optional": true
            },
            {
                "token": "INCRBY",
                "name": "encoding_offset_increment",
                "type": "block",
                "value": [
                    {
                        "name": "encoding",
                        "type": "string",
                        "value": "encoding"
                    },
                    {
                        "name": "offset",
                        "type": "integer",
                        "value": "offset"
                    },
                    {
                        "name": "increment",
                        "type": "integer",
                        "value": "increment"
                    }
                ],
                "optional": true
            },
            {
                "token": "OVERFLOW",
                "name": "wrap_sat_fail",
                "type": "oneof",
                "value": [
                    {
                        "name": "wrap",
                        "type": "pure-token",
                        "token": "WRAP"
                    },
                    {
                        "name": "sat",
                        "type": "pure-token",
                        "token": "SAT"
                    },
                    {
                        "name": "fail",
                        "type": "pure-token",
                        "token": "FAIL"
                    }
                ],
                "optional": true
            }
        ]
    },
    "BITFIELD_RO": {
        "summary": "Perform arbitrary bitfield integer operations on strings. Read-only variant of BITFIELD",
        "complexity": "O(1) for each subcommand specified",
        "group": "bitmap",
        "since": "6.2.0",
        "arity": -2,
        "function": "bitfieldroCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "bitmap"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "token": "GET",
                "name": "encoding_offset",
                "type": "block",
                "value": [
                    {
                        "name": "encoding",
                        "type": "string",
                        "value": "encoding"
                    },
                    {
                        "name": "offset",
                        "type": "integer",
                        "value": "offset"
                    }
                ]
            }
        ]
    },
    "BITOP": {
        "summary": "Perform bitwise operations between strings",
        "complexity": "O(N)",
        "group": "bitmap",
        "since": "2.6.0",
        "arity": -4,
        "function": "bitopCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "bitmap"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 3
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "operation",
                "type": "string",
                "value": "operation"
            },
            {
                "name": "destkey",
                "type": "key",
                "value": "destkey",
                "key_spec_index": 0
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 1,
                "multiple": true
            }
        ]
    },
    "BITPOS": {
        "summary": "Find first bit set or clear in a string",
        "complexity": "O(N)",
        "group": "bitmap",
        "since": "2.8.7",
        "arity": -3,
        "function": "bitposCommand",
        "history": [
            [
                "7.0",
                "Added the `BYTE|BIT` option."
            ]
        ],
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "bitmap"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "bit",
                "type": "integer",
                "value": "bit"
            },
            {
                "name": "index",
                "type": "block",
                "value": [
                    {
                        "name": "start",
                        "type": "integer",
                        "value": "start"
                    },
                    {
                        "name": "end_index",
                        "type": "block",
                        "value": [
                            {
                                "name": "end",
                                "type": "integer",
                                "value": "end"
                            },
                            {
                                "name": "index_unit",
                                "type": "oneof",
                                "value": [
                                    {
                                        "name": "byte",
                                        "type": "pure-token",
                                        "token": "BYTE"
                                    },
                                    {
                                        "name": "bit",
                                        "type": "pure-token",
                                        "token": "BIT"
                                    }
                                ],
                                "optional": true
                            }
                        ],
                        "optional": true
                    }
                ],
                "optional": true
            }
        ]
    },
    "BLMOVE": {
        "summary": "Pop an element from a list, push it to another list and return it; or block until one is available",
        "complexity": "O(1)",
        "group": "list",
        "since": "6.2.0",
        "arity": 6,
        "function": "blmoveCommand",
        "command_flags": [
            "write",
            "denyoom",
            "noscript"
        ],
        "acl_categories": [
            "list",
            "blocking"
        ],
        "key_specs": [
            {
                "flags": [
                    "write",
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "source",
                "type": "key",
                "value": "source",
                "key_spec_index": 0
            },
            {
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 1
            },
            {
                "name": "wherefrom",
                "type": "oneof",
                "value": [
                    {
                        "name": "left",
                        "type": "pure-token",
                        "token": "LEFT"
                    },
                    {
                        "name": "right",
                        "type": "pure-token",
                        "token": "RIGHT"
                    }
                ]
            },
            {
                "name": "whereto",
                "type": "oneof",
                "value": [
                    {
                        "name": "left",
                        "type": "pure-token",
                        "token": "LEFT"
                    },
                    {
                        "name": "right",
                        "type": "pure-token",
                        "token": "RIGHT"
                    }
                ]
            },
            {
                "name": "timeout",
                "type": "double",
                "value": "timeout"
            }
        ]
    },
    "BLPOP": {
        "summary": "Remove and get the first element in a list, or block until one is available",
        "complexity": "O(N) where N is the number of provided keys.",
        "group": "list",
        "since": "2.0.0",
        "arity": -3,
        "function": "blpopCommand",
        "history": [
            [
                "6.0",
                "`timeout` is interpreted as a double instead of an integer."
            ]
        ],
        "command_flags": [
            "write",
            "noscript"
        ],
        "acl_categories": [
            "list",
            "blocking"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -2,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "name": "timeout",
                "type": "double",
                "value": "timeout"
            }
        ]
    },
    "BLMPOP": {
        "summary": "Pop elements from a list, or block until one is available",
        "complexity": "O(N+M) where N is the number of provided keys and M is the number of elements returned.",
        "group": "list",
        "since": "7.0.0",
        "arity": -5,
        "function": "blmpopCommand",
        "get_keys_function": "blmpopGetKeys",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "list",
            "blocking"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "timeout",
                "type": "double",
                "value": "timeout"
            },
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "name": "where",
                "type": "oneof",
                "value": [
                    {
                        "name": "left",
                        "type": "pure-token",
                        "token": "LEFT"
                    },
                    {
                        "name": "right",
                        "type": "pure-token",
                        "token": "RIGHT"
                    }
                ]
            },
            {
                "token": "COUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "BRPOP": {
        "summary": "Remove and get the last element in a list, or block until one is available",
        "complexity": "O(N) where N is the number of provided keys.",
        "group": "list",
        "since": "2.0.0",
        "arity": -3,
        "function": "brpopCommand",
        "history": [
            [
                "6.0",
                "`timeout` is interpreted as a double instead of an integer."
            ]
        ],
        "command_flags": [
            "write",
            "noscript"
        ],
        "acl_categories": [
            "list",
            "blocking"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -2,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "name": "timeout",
                "type": "double",
                "value": "timeout"
            }
        ]
    },
    "BRPOPLPUSH": {
        "summary": "Pop an element from a list, push it to another list and return it; or block until one is available",
        "complexity": "O(1)",
        "group": "list",
        "since": "2.2.0",
        "arity": 4,
        "function": "brpoplpushCommand",
        "history": [
            [
                "6.0",
                "`timeout` is interpreted as a double instead of an integer."
            ]
        ],
        "deprecated_since": "6.2.0",
        "replaced_by": "`BLMOVE` with the `RIGHT` and `LEFT` arguments",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "write",
            "denyoom",
            "noscript"
        ],
        "acl_categories": [
            "list",
            "blocking"
        ],
        "key_specs": [
            {
                "flags": [
                    "write",
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "source",
                "type": "key",
                "value": "source",
                "key_spec_index": 0
            },
            {
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 1
            },
            {
                "name": "timeout",
                "type": "double",
                "value": "timeout"
            }
        ]
    },
    "BZMPOP": {
        "summary": "Remove and return members with scores in a sorted set or block until one is available",
        "complexity": "O(K) + O(N*log(M)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.",
        "group": "sorted_set",
        "since": "7.0.0",
        "arity": -5,
        "function": "bzmpopCommand",
        "get_keys_function": "blmpopGetKeys",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "sortedset",
            "blocking"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "timeout",
                "type": "double",
                "value": "timeout"
            },
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "name": "where",
                "type": "oneof",
                "value": [
                    {
                        "name": "min",
                        "type": "pure-token",
                        "token": "MIN"
                    },
                    {
                        "name": "max",
                        "type": "pure-token",
                        "token": "MAX"
                    }
                ]
            },
            {
                "token": "COUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "BZPOPMAX": {
        "summary": "Remove and return the member with the highest score from one or more sorted sets, or block until one is available",
        "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
        "group": "sorted_set",
        "since": "5.0.0",
        "arity": -3,
        "function": "bzpopmaxCommand",
        "history": [
            [
                "6.0",
                "`timeout` is interpreted as a double instead of an integer."
            ]
        ],
        "command_flags": [
            "write",
            "noscript",
            "fast"
        ],
        "acl_categories": [
            "sortedset",
            "blocking"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -2,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "name": "timeout",
                "type": "double",
                "value": "timeout"
            }
        ]
    },
    "BZPOPMIN": {
        "summary": "Remove and return the member with the lowest score from one or more sorted sets, or block until one is available",
        "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
        "group": "sorted_set",
        "since": "5.0.0",
        "arity": -3,
        "function": "bzpopminCommand",
        "history": [
            [
                "6.0",
                "`timeout` is interpreted as a double instead of an integer."
            ]
        ],
        "command_flags": [
            "write",
            "noscript",
            "fast"
        ],
        "acl_categories": [
            "sortedset",
            "blocking"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -2,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "name": "timeout",
                "type": "double",
                "value": "timeout"
            }
        ]
    },
    "CLIENT CACHING": {
        "summary": "Instruct the server about tracking or not keys in the next request",
        "complexity": "O(1)",
        "group": "connection",
        "since": "6.0.0",
        "arity": 3,
        "container": "CLIENT",
        "function": "clientCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "mode",
                "type": "oneof",
                "value": [
                    {
                        "name": "yes",
                        "type": "pure-token",
                        "token": "YES"
                    },
                    {
                        "name": "no",
                        "type": "pure-token",
                        "token": "NO"
                    }
                ]
            }
        ]
    },
    "CLIENT GETNAME": {
        "summary": "Get the current connection name",
        "complexity": "O(1)",
        "group": "connection",
        "since": "2.6.9",
        "arity": 2,
        "container": "CLIENT",
        "function": "clientCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "CLIENT GETREDIR": {
        "summary": "Get tracking notifications redirection client ID if any",
        "complexity": "O(1)",
        "group": "connection",
        "since": "6.0.0",
        "arity": 2,
        "container": "CLIENT",
        "function": "clientCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "CLIENT HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "connection",
        "since": "5.0.0",
        "arity": 2,
        "container": "CLIENT",
        "function": "clientCommand",
        "command_flags": [
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "CLIENT ID": {
        "summary": "Returns the client ID for the current connection",
        "complexity": "O(1)",
        "group": "connection",
        "since": "5.0.0",
        "arity": 2,
        "container": "CLIENT",
        "function": "clientCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "CLIENT INFO": {
        "summary": "Returns information about the current client connection.",
        "complexity": "O(1)",
        "group": "connection",
        "since": "6.2.0",
        "arity": 2,
        "container": "CLIENT",
        "function": "clientCommand",
        "command_flags": [
            "noscript",
            "random",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "CLIENT KILL": {
        "summary": "Kill the connection of a client",
        "complexity": "O(N) where N is the number of client connections",
        "group": "connection",
        "since": "2.4.0",
        "arity": -3,
        "container": "CLIENT",
        "function": "clientCommand",
        "history": [
            [
                "2.8.12",
                "Added new filter format. "
            ],
            [
                "2.8.12",
                "`ID` option."
            ],
            [
                "3.2",
                "Added `master` type in for `TYPE` option."
            ],
            [
                "5",
                "Replaced `slave` `TYPE` with `replica`. `slave` still supported for backward compatibility."
            ],
            [
                "6.2",
                "`LADDR` option."
            ]
        ],
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "ip:port",
                "type": "string",
                "value": "ip:port",
                "optional": true
            },
            {
                "token": "ID",
                "name": "client-id",
                "type": "integer",
                "value": "client-id",
                "optional": true
            },
            {
                "token": "TYPE",
                "name": "normal_master_slave_pubsub",
                "type": "oneof",
                "value": [
                    {
                        "name": "normal",
                        "type": "pure-token",
                        "token": "normal"
                    },
                    {
                        "name": "master",
                        "type": "pure-token",
                        "token": "master"
                    },
                    {
                        "name": "slave",
                        "type": "pure-token",
                        "token": "slave"
                    },
                    {
                        "name": "pubsub",
                        "type": "pure-token",
                        "token": "pubsub"
                    }
                ],
                "optional": true
            },
            {
                "token": "USER",
                "name": "username",
                "type": "string",
                "value": "username",
                "optional": true
            },
            {
                "token": "ADDR",
                "name": "ip:port",
                "type": "string",
                "value": "ip:port",
                "optional": true
            },
            {
                "token": "LADDR",
                "name": "ip:port",
                "type": "string",
                "value": "ip:port",
                "optional": true
            },
            {
                "token": "SKIPME",
                "name": "yes/no",
                "type": "string",
                "value": "yes/no",
                "optional": true
            }
        ]
    },
    "CLIENT LIST": {
        "summary": "Get the list of client connections",
        "complexity": "O(N) where N is the number of client connections",
        "group": "connection",
        "since": "2.4.0",
        "arity": -2,
        "container": "CLIENT",
        "function": "clientCommand",
        "history": [
            [
                "2.8.12",
                "Added unique client `id` field."
            ],
            [
                "5.0",
                "Added optional `TYPE` filter."
            ],
            [
                "6.2",
                "Added `laddr` field and the optional `ID` filter."
            ]
        ],
        "command_flags": [
            "admin",
            "noscript",
            "random",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "token": "TYPE",
                "name": "normal_master_replica_pubsub",
                "type": "oneof",
                "value": [
                    {
                        "name": "normal",
                        "type": "pure-token",
                        "token": "normal"
                    },
                    {
                        "name": "master",
                        "type": "pure-token",
                        "token": "master"
                    },
                    {
                        "name": "replica",
                        "type": "pure-token",
                        "token": "replica"
                    },
                    {
                        "name": "pubsub",
                        "type": "pure-token",
                        "token": "pubsub"
                    }
                ],
                "optional": true
            },
            {
                "name": "id",
                "type": "block",
                "value": [
                    {
                        "token": "ID",
                        "name": "id",
                        "type": "pure-token"
                    },
                    {
                        "name": "client-id",
                        "type": "integer",
                        "value": "client-id",
                        "multiple": true
                    }
                ],
                "optional": true
            }
        ]
    },
    "CLIENT NO-EVICT": {
        "summary": "Set client eviction mode for the current connection",
        "complexity": "O(1)",
        "group": "connection",
        "since": "7.0.0",
        "arity": 3,
        "container": "CLIENT",
        "function": "clientCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "enabled",
                "type": "oneof",
                "value": [
                    {
                        "name": "on",
                        "type": "pure-token",
                        "token": "ON"
                    },
                    {
                        "name": "off",
                        "type": "pure-token",
                        "token": "OFF"
                    }
                ]
            }
        ]
    },
    "CLIENT REPLY": {
        "summary": "Instruct the server whether to reply to commands",
        "complexity": "O(1)",
        "group": "connection",
        "since": "3.2.0",
        "arity": 3,
        "container": "CLIENT",
        "function": "clientCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "on_off_skip",
                "type": "oneof",
                "value": [
                    {
                        "name": "on",
                        "type": "pure-token",
                        "token": "ON"
                    },
                    {
                        "name": "off",
                        "type": "pure-token",
                        "token": "OFF"
                    },
                    {
                        "name": "skip",
                        "type": "pure-token",
                        "token": "SKIP"
                    }
                ]
            }
        ]
    },
    "CLIENT PAUSE": {
        "summary": "Stop processing commands from clients for some time",
        "complexity": "O(1)",
        "group": "connection",
        "since": "2.9.50",
        "arity": -3,
        "container": "CLIENT",
        "function": "clientCommand",
        "history": [
            [
                "3.2.10",
                "Client pause prevents client pause and key eviction as well."
            ],
            [
                "6.2",
                "CLIENT PAUSE WRITE mode added along with the `mode` option."
            ]
        ],
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "timeout",
                "type": "integer",
                "value": "timeout"
            },
            {
                "name": "mode",
                "type": "oneof",
                "value": [
                    {
                        "name": "write",
                        "type": "pure-token",
                        "token": "WRITE"
                    },
                    {
                        "name": "all",
                        "type": "pure-token",
                        "token": "ALL"
                    }
                ],
                "optional": true
            }
        ]
    },
    "CLIENT SETNAME": {
        "summary": "Set the current connection name",
        "complexity": "O(1)",
        "group": "connection",
        "since": "2.6.9",
        "arity": 3,
        "container": "CLIENT",
        "function": "clientCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "connection-name",
                "type": "string",
                "value": "connection-name"
            }
        ]
    },
    "CLIENT TRACKING": {
        "summary": "Enable or disable server assisted client side caching support",
        "complexity": "O(1). Some options may introduce additional complexity.",
        "group": "connection",
        "since": "6.0.0",
        "arity": -3,
        "container": "CLIENT",
        "function": "clientCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "status",
                "type": "oneof",
                "value": [
                    {
                        "name": "on",
                        "type": "pure-token",
                        "token": "ON"
                    },
                    {
                        "name": "off",
                        "type": "pure-token",
                        "token": "OFF"
                    }
                ]
            },
            {
                "token": "REDIRECT",
                "name": "client-id",
                "type": "integer",
                "value": "client-id",
                "optional": true
            },
            {
                "token": "PREFIX",
                "name": "prefix",
                "type": "string",
                "value": "prefix",
                "optional": true,
                "multiple": true,
                "multiple_token": true
            },
            {
                "name": "BCAST",
                "token": "BCAST",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "OPTIN",
                "token": "OPTIN",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "OPTOUT",
                "token": "OPTOUT",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "NOLOOP",
                "token": "NOLOOP",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "CLIENT TRACKINGINFO": {
        "summary": "Return information about server assisted client side caching for the current connection",
        "complexity": "O(1)",
        "group": "connection",
        "since": "6.2.0",
        "arity": 2,
        "container": "CLIENT",
        "function": "clientCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "CLIENT UNBLOCK": {
        "summary": "Unblock a client blocked in a blocking command from a different connection",
        "complexity": "O(log N) where N is the number of client connections",
        "group": "connection",
        "since": "5.0.0",
        "arity": -3,
        "container": "CLIENT",
        "function": "clientCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "client-id",
                "type": "integer",
                "value": "client-id"
            },
            {
                "name": "timeout_error",
                "type": "oneof",
                "value": [
                    {
                        "name": "timeout",
                        "type": "pure-token",
                        "token": "TIMEOUT"
                    },
                    {
                        "name": "error",
                        "type": "pure-token",
                        "token": "ERROR"
                    }
                ],
                "optional": true
            }
        ]
    },
    "CLIENT": {
        "summary": "A container for client connection commands",
        "complexity": "Depends on subcommand.",
        "group": "connection",
        "since": "2.4.0",
        "arity": -2,
        "command_flags": [
            "sentinel"
        ]
    },
    "CLIENT UNPAUSE": {
        "summary": "Resume processing of clients that were paused",
        "complexity": "O(N) Where N is the number of paused clients",
        "group": "connection",
        "since": "6.2.0",
        "arity": 2,
        "container": "CLIENT",
        "function": "clientCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "CLUSTER ADDSLOTS": {
        "summary": "Assign new hash slots to receiving node",
        "complexity": "O(N) where N is the total number of hash slot arguments",
        "group": "cluster",
        "since": "3.0.0",
        "arity": -3,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "slot",
                "type": "integer",
                "value": "slot",
                "multiple": true
            }
        ]
    },
    "CLUSTER ADDSLOTSRANGE": {
        "summary": "Assign new hash slots to receiving node",
        "complexity": "O(N) where N is the total number of the slots between the start slot and end slot arguments.",
        "group": "cluster",
        "since": "7.0.0",
        "arity": -4,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "start-slot_end-slot",
                "type": "block",
                "value": [
                    {
                        "name": "start-slot",
                        "type": "integer",
                        "value": "start-slot"
                    },
                    {
                        "name": "end-slot",
                        "type": "integer",
                        "value": "end-slot"
                    }
                ],
                "multiple": true
            }
        ]
    },
    "CLUSTER BUMPEPOCH": {
        "summary": "Advance the cluster config epoch",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 2,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ]
    },
    "CLUSTER COUNT-FAILURE-REPORTS": {
        "summary": "Return the number of failure reports active for a given node",
        "complexity": "O(N) where N is the number of failure reports",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 3,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "node-id",
                "type": "string",
                "value": "node-id"
            }
        ]
    },
    "CLUSTER COUNTKEYSINSLOT": {
        "summary": "Return the number of local keys in the specified hash slot",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 3,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "slot",
                "type": "integer",
                "value": "slot"
            }
        ]
    },
    "CLUSTER DELSLOTSRANGE": {
        "summary": "Set hash slots as unbound in receiving node",
        "complexity": "O(N) where N is the total number of the slots between the start slot and end slot arguments.",
        "group": "cluster",
        "since": "7.0.0",
        "arity": -4,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "start-slot_end-slot",
                "type": "block",
                "value": [
                    {
                        "name": "start-slot",
                        "type": "integer",
                        "value": "start-slot"
                    },
                    {
                        "name": "end-slot",
                        "type": "integer",
                        "value": "end-slot"
                    }
                ],
                "multiple": true
            }
        ]
    },
    "CLUSTER DELSLOTS": {
        "summary": "Set hash slots as unbound in receiving node",
        "complexity": "O(N) where N is the total number of hash slot arguments",
        "group": "cluster",
        "since": "3.0.0",
        "arity": -3,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "slot",
                "type": "integer",
                "value": "slot",
                "multiple": true
            }
        ]
    },
    "CLUSTER FAILOVER": {
        "summary": "Forces a replica to perform a manual failover of its master.",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": -2,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "options",
                "type": "oneof",
                "value": [
                    {
                        "name": "force",
                        "type": "pure-token",
                        "token": "FORCE"
                    },
                    {
                        "name": "takeover",
                        "type": "pure-token",
                        "token": "TAKEOVER"
                    }
                ],
                "optional": true
            }
        ]
    },
    "CLUSTER FLUSHSLOTS": {
        "summary": "Delete a node's own slots information",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 2,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ]
    },
    "CLUSTER FORGET": {
        "summary": "Remove a node from the nodes table",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 3,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "node-id",
                "type": "string",
                "value": "node-id"
            }
        ]
    },
    "CLUSTER GETKEYSINSLOT": {
        "summary": "Return local key names in the specified hash slot",
        "complexity": "O(log(N)) where N is the number of requested keys",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 4,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "slot",
                "type": "integer",
                "value": "slot"
            },
            {
                "name": "count",
                "type": "integer",
                "value": "count"
            }
        ]
    },
    "CLUSTER HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "5.0.0",
        "arity": 2,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "loading",
            "stale"
        ]
    },
    "CLUSTER INFO": {
        "summary": "Provides info about Redis Cluster node state",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 2,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "random",
            "stale"
        ]
    },
    "CLUSTER MEET": {
        "summary": "Force a node cluster to handshake with another node",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": -4,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "ip",
                "type": "string",
                "value": "ip"
            },
            {
                "name": "port",
                "type": "integer",
                "value": "port"
            }
        ]
    },
    "CLUSTER KEYSLOT": {
        "summary": "Returns the hash slot of the specified key",
        "complexity": "O(N) where N is the number of bytes in the key",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 3,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "key",
                "type": "string",
                "value": "key"
            }
        ]
    },
    "CLUSTER MYID": {
        "summary": "Return the node id",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 2,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "random",
            "stale"
        ]
    },
    "CLUSTER NODES": {
        "summary": "Get Cluster config for the node",
        "complexity": "O(N) where N is the total number of Cluster nodes",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 2,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "random",
            "stale"
        ]
    },
    "CLUSTER REPLICAS": {
        "summary": "List replica nodes of the specified master node",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "5.0.0",
        "arity": 3,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "node-id",
                "type": "string",
                "value": "node-id"
            }
        ]
    },
    "CLUSTER REPLICATE": {
        "summary": "Reconfigure a node as a replica of the specified master node",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 3,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "node-id",
                "type": "string",
                "value": "node-id"
            }
        ]
    },
    "CLUSTER RESET": {
        "summary": "Reset a Redis Cluster node",
        "complexity": "O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 3,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "hard_soft",
                "type": "oneof",
                "value": [
                    {
                        "name": "hard",
                        "type": "pure-token",
                        "token": "HARD"
                    },
                    {
                        "name": "soft",
                        "type": "pure-token",
                        "token": "SOFT"
                    }
                ],
                "optional": true
            }
        ]
    },
    "CLUSTER SAVECONFIG": {
        "summary": "Forces the node to save cluster state on disk",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 2,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ]
    },
    "CLUSTER SET-CONFIG-EPOCH": {
        "summary": "Set the configuration epoch in a new node",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 3,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "config-epoch",
                "type": "integer",
                "value": "config-epoch"
            }
        ]
    },
    "CLUSTER SETSLOT": {
        "summary": "Bind a hash slot to a specific node",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": -4,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "command_flags": [
            "admin",
            "random",
            "stale"
        ],
        "arguments": [
            {
                "name": "slot",
                "type": "integer",
                "value": "slot"
            },
            {
                "name": "subcommand",
                "type": "oneof",
                "value": [
                    {
                        "name": "node-id",
                        "type": "integer",
                        "value": "node-id",
                        "token": "IMPORTING"
                    },
                    {
                        "name": "node-id",
                        "type": "integer",
                        "value": "node-id",
                        "token": "MIGRATING"
                    },
                    {
                        "name": "node-id",
                        "type": "integer",
                        "value": "node-id",
                        "token": "NODE"
                    },
                    {
                        "name": "stable",
                        "type": "pure-token",
                        "token": "STABLE"
                    }
                ]
            }
        ]
    },
    "CLUSTER SLOTS": {
        "summary": "Get array of Cluster slot to node mappings",
        "complexity": "O(N) where N is the total number of Cluster nodes",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 2,
        "container": "CLUSTER",
        "function": "clusterCommand",
        "history": [
            [
                "4.0",
                "Added node IDs."
            ]
        ],
        "command_flags": [
            "random",
            "stale"
        ]
    },
    "CLUSTER": {
        "summary": "A container for cluster commands",
        "complexity": "Depends on subcommand.",
        "group": "cluster",
        "since": "3.0.0",
        "arity": -2
    },
    "COMMAND COUNT": {
        "summary": "Get total number of Redis commands",
        "complexity": "O(1)",
        "group": "server",
        "since": "2.8.13",
        "arity": 2,
        "container": "COMMAND",
        "function": "commandCountCommand",
        "command_flags": [
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "COMMAND GETKEYS": {
        "summary": "Extract keys given a full Redis command",
        "complexity": "O(N) where N is the number of arguments to the command",
        "group": "server",
        "since": "2.8.13",
        "arity": -4,
        "container": "COMMAND",
        "function": "commandGetKeysCommand",
        "command_flags": [
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "COMMAND HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "server",
        "since": "5.0.0",
        "arity": 2,
        "container": "COMMAND",
        "function": "commandHelpCommand",
        "command_flags": [
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "COMMAND INFO": {
        "summary": "Get array of specific Redis command details",
        "complexity": "O(N) when N is number of commands to look up",
        "group": "server",
        "since": "2.8.13",
        "arity": -3,
        "container": "COMMAND",
        "function": "commandInfoCommand",
        "command_flags": [
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "command-name",
                "type": "string",
                "value": "command-name",
                "multiple": true
            }
        ]
    },
    "COMMAND LIST": {
        "summary": "PATCH__TBD__76__",
        "complexity": "PATCH__TBD__75__",
        "group": "server",
        "since": "PATCH__TBD__77__",
        "arity": -2,
        "container": "COMMAND",
        "function": "commandListCommand",
        "command_flags": [
            "loading",
            "stale"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "COMMAND": {
        "summary": "Get array of Redis command details",
        "complexity": "O(N) where N is the total number of Redis commands",
        "group": "server",
        "since": "2.8.13",
        "arity": -1,
        "function": "commandCommand",
        "command_flags": [
            "random",
            "loading",
            "stale",
            "sentinel"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "CONFIG GET": {
        "summary": "Get the value of a configuration parameter",
        "complexity": "PATCH__TBD__45__",
        "group": "server",
        "since": "2.0.0",
        "arity": 3,
        "container": "CONFIG",
        "function": "configGetCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ],
        "arguments": [
            {
                "name": "parameter",
                "type": "string",
                "value": "parameter"
            }
        ]
    },
    "CONFIG HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "server",
        "since": "5.0.0",
        "arity": 2,
        "container": "CONFIG",
        "function": "configHelpCommand",
        "command_flags": [
            "loading",
            "stale"
        ]
    },
    "CONFIG RESETSTAT": {
        "summary": "Reset the stats returned by INFO",
        "complexity": "O(1)",
        "group": "server",
        "since": "2.0.0",
        "arity": 2,
        "container": "CONFIG",
        "function": "configResetStatCommand",
        "command_flags": [
            "admin",
            "noscript",
            "stale"
        ]
    },
    "CONFIG REWRITE": {
        "summary": "Rewrite the configuration file with the in memory configuration",
        "complexity": "PATCH__TBD__46__",
        "group": "server",
        "since": "2.8.0",
        "arity": 2,
        "container": "CONFIG",
        "function": "configRewriteCommand",
        "command_flags": [
            "admin",
            "noscript",
            "stale"
        ]
    },
    "CONFIG SET": {
        "summary": "Set a configuration parameter to the given value",
        "complexity": "PATCH__TBD__47__",
        "group": "server",
        "since": "2.0.0",
        "arity": 4,
        "container": "CONFIG",
        "function": "configSetCommand",
        "command_flags": [
            "admin",
            "noscript",
            "stale"
        ],
        "arguments": [
            {
                "name": "parameter",
                "type": "string",
                "value": "parameter"
            },
            {
                "name": "value",
                "type": "string",
                "value": "value"
            }
        ]
    },
    "CONFIG": {
        "summary": "A container for server configuration commands",
        "complexity": "Depends on subcommand.",
        "group": "server",
        "since": "2.0.0",
        "arity": -2
    },
    "COPY": {
        "summary": "Copy a key",
        "complexity": "O(N) worst case for collections, where N is the number of nested items. O(1) for string values.",
        "group": "generic",
        "since": "6.2.0",
        "arity": -3,
        "function": "copyCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "source",
                "type": "key",
                "value": "source",
                "key_spec_index": 0
            },
            {
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 1
            },
            {
                "token": "DB",
                "name": "destination-db",
                "type": "integer",
                "value": "destination-db",
                "optional": true
            },
            {
                "name": "replace",
                "token": "REPLACE",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "DBSIZE": {
        "summary": "Return the number of keys in the selected database",
        "complexity": "O(1)",
        "group": "server",
        "since": "1.0.0",
        "arity": 1,
        "function": "dbsizeCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ]
    },
    "DEBUG": {
        "summary": "A container for debugging commands",
        "complexity": "Depends on subcommand.",
        "group": "server",
        "since": "1.0.0",
        "arity": -2,
        "function": "debugCommand",
        "doc_flags": [
            "syscmd"
        ],
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ]
    },
    "DECR": {
        "summary": "Decrement the integer value of a key by one",
        "complexity": "O(1)",
        "group": "string",
        "since": "1.0.0",
        "arity": 2,
        "function": "decrCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "DECRBY": {
        "summary": "Decrement the integer value of a key by the given number",
        "complexity": "O(1)",
        "group": "string",
        "since": "1.0.0",
        "arity": 3,
        "function": "decrbyCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "decrement",
                "type": "integer",
                "value": "decrement"
            }
        ]
    },
    "DEL": {
        "summary": "Delete a key",
        "complexity": "O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).",
        "group": "generic",
        "since": "1.0.0",
        "arity": -2,
        "function": "delCommand",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            }
        ]
    },
    "DISCARD": {
        "summary": "Discard all commands issued after MULTI",
        "complexity": "PATCH__TBD__60__",
        "group": "transactions",
        "since": "2.0.0",
        "arity": 1,
        "function": "discardCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale",
            "fast"
        ],
        "acl_categories": [
            "transaction"
        ]
    },
    "DUMP": {
        "summary": "Return a serialized version of the value stored at the specified key.",
        "complexity": "O(1) to access the key and additional O(N*M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).",
        "group": "generic",
        "since": "2.6.0",
        "arity": 2,
        "function": "dumpCommand",
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "ECHO": {
        "summary": "Echo the given string",
        "complexity": "PATCH__TBD__52__",
        "group": "connection",
        "since": "1.0.0",
        "arity": 2,
        "function": "echoCommand",
        "command_flags": [
            "fast"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "message",
                "type": "string",
                "value": "message"
            }
        ]
    },
    "EVAL": {
        "summary": "Execute a Lua script server side",
        "complexity": "Depends on the script that is executed.",
        "group": "scripting",
        "since": "2.6.0",
        "arity": -3,
        "function": "evalCommand",
        "get_keys_function": "evalGetKeys",
        "command_flags": [
            "noscript",
            "skip_monitor",
            "may_replicate",
            "no_mandatory_keys"
        ],
        "acl_categories": [
            "scripting"
        ],
        "key_specs": [
            {
                "flags": [
                    "write",
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "script",
                "type": "string",
                "value": "script"
            },
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "optional": true,
                "multiple": true
            },
            {
                "name": "arg",
                "type": "string",
                "value": "arg",
                "optional": true,
                "multiple": true
            }
        ]
    },
    "EVAL_RO": {
        "summary": "Execute a read-only Lua script server side",
        "complexity": "Depends on the script that is executed.",
        "group": "scripting",
        "since": "7.0.0",
        "arity": -3,
        "function": "evalRoCommand",
        "get_keys_function": "evalGetKeys",
        "command_flags": [
            "noscript",
            "skip_monitor",
            "no_mandatory_keys"
        ],
        "acl_categories": [
            "scripting"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "script",
                "type": "string",
                "value": "script"
            },
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "name": "arg",
                "type": "string",
                "value": "arg",
                "multiple": true
            }
        ]
    },
    "EVALSHA": {
        "summary": "Execute a Lua script server side",
        "complexity": "Depends on the script that is executed.",
        "group": "scripting",
        "since": "2.6.0",
        "arity": -3,
        "function": "evalShaCommand",
        "get_keys_function": "evalGetKeys",
        "command_flags": [
            "noscript",
            "skip_monitor",
            "may_replicate",
            "no_mandatory_keys"
        ],
        "acl_categories": [
            "scripting"
        ],
        "key_specs": [
            {
                "flags": [
                    "write",
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "sha1",
                "type": "string",
                "value": "sha1"
            },
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "optional": true,
                "multiple": true
            },
            {
                "name": "arg",
                "type": "string",
                "value": "arg",
                "optional": true,
                "multiple": true
            }
        ]
    },
    "EVALSHA_RO": {
        "summary": "Execute a read-only Lua script server side",
        "complexity": "Depends on the script that is executed.",
        "group": "scripting",
        "since": "7.0.0",
        "arity": -3,
        "function": "evalShaRoCommand",
        "get_keys_function": "evalGetKeys",
        "command_flags": [
            "noscript",
            "skip_monitor",
            "no_mandatory_keys"
        ],
        "acl_categories": [
            "scripting"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "sha1",
                "type": "string",
                "value": "sha1"
            },
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "name": "arg",
                "type": "string",
                "value": "arg",
                "multiple": true
            }
        ]
    },
    "EXEC": {
        "summary": "Execute all commands issued after MULTI",
        "complexity": "PATCH__TBD__39__",
        "group": "transactions",
        "since": "1.2.0",
        "arity": 1,
        "function": "execCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale",
            "skip_slowlog"
        ],
        "acl_categories": [
            "transaction"
        ]
    },
    "EXISTS": {
        "summary": "Determine if a key exists",
        "complexity": "O(N) where N is the number of keys to check.",
        "group": "generic",
        "since": "1.0.0",
        "arity": -2,
        "function": "existsCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            }
        ]
    },
    "EXPIRE": {
        "summary": "Set a key's time to live in seconds",
        "complexity": "O(1)",
        "group": "generic",
        "since": "1.0.0",
        "arity": -3,
        "function": "expireCommand",
        "history": [
            [
                "7.0",
                "Added options: `NX`, `XX`, `GT` and `LT`."
            ]
        ],
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "seconds",
                "type": "integer",
                "value": "seconds"
            },
            {
                "name": "condition",
                "type": "oneof",
                "value": [
                    {
                        "name": "nx",
                        "type": "pure-token",
                        "token": "NX"
                    },
                    {
                        "name": "xx",
                        "type": "pure-token",
                        "token": "XX"
                    },
                    {
                        "name": "gt",
                        "type": "pure-token",
                        "token": "GT"
                    },
                    {
                        "name": "lt",
                        "type": "pure-token",
                        "token": "LT"
                    }
                ],
                "optional": true
            }
        ]
    },
    "EXPIRETIME": {
        "summary": "Get the expiration Unix timestamp for a key",
        "complexity": "O(1)",
        "group": "generic",
        "since": "7.0.0",
        "arity": 2,
        "function": "expiretimeCommand",
        "command_flags": [
            "readonly",
            "random",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "EXPIREAT": {
        "summary": "Set the expiration for a key as a UNIX timestamp",
        "complexity": "O(1)",
        "group": "generic",
        "since": "1.2.0",
        "arity": -3,
        "function": "expireatCommand",
        "history": [
            [
                "7.0",
                "Added options: `NX`, `XX`, `GT` and `LT`."
            ]
        ],
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "timestamp",
                "type": "unix-time",
                "value": "timestamp"
            },
            {
                "name": "condition",
                "type": "oneof",
                "value": [
                    {
                        "name": "nx",
                        "type": "pure-token",
                        "token": "NX"
                    },
                    {
                        "name": "xx",
                        "type": "pure-token",
                        "token": "XX"
                    },
                    {
                        "name": "gt",
                        "type": "pure-token",
                        "token": "GT"
                    },
                    {
                        "name": "lt",
                        "type": "pure-token",
                        "token": "LT"
                    }
                ],
                "optional": true
            }
        ]
    },
    "FAILOVER": {
        "summary": "Start a coordinated failover between this server and one of its replicas.",
        "complexity": "PATCH__TBD__69__",
        "group": "server",
        "since": "6.2.0",
        "arity": -1,
        "function": "failoverCommand",
        "command_flags": [
            "admin",
            "noscript",
            "stale"
        ],
        "arguments": [
            {
                "name": "target",
                "type": "block",
                "value": [
                    {
                        "token": "TO",
                        "name": "to",
                        "type": "pure-token"
                    },
                    {
                        "name": "host",
                        "type": "string",
                        "value": "host"
                    },
                    {
                        "name": "port",
                        "type": "integer",
                        "value": "port"
                    },
                    {
                        "token": "FORCE",
                        "name": "force",
                        "type": "pure-token",
                        "optional": true
                    }
                ],
                "optional": true
            },
            {
                "token": "ABORT",
                "name": "abort",
                "type": "pure-token",
                "optional": true
            },
            {
                "token": "TIMEOUT",
                "name": "milliseconds",
                "type": "integer",
                "value": "milliseconds",
                "optional": true
            }
        ]
    },
    "FLUSHALL": {
        "summary": "Remove all keys from all databases",
        "complexity": "O(N) where N is the total number of keys in all databases",
        "group": "server",
        "since": "1.0.0",
        "arity": -1,
        "function": "flushallCommand",
        "history": [
            [
                "4.0.0",
                "Added the `ASYNC` flushing mode modifier."
            ],
            [
                "6.2.0",
                "Added the `SYNC` flushing mode modifier and the **lazyfree-lazy-user-flush** configuration directive."
            ]
        ],
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "keyspace",
            "dangerous"
        ],
        "arguments": [
            {
                "name": "async",
                "type": "oneof",
                "value": [
                    {
                        "name": "async",
                        "type": "pure-token",
                        "token": "ASYNC"
                    },
                    {
                        "name": "sync",
                        "type": "pure-token",
                        "token": "SYNC"
                    }
                ],
                "optional": true
            }
        ]
    },
    "FLUSHDB": {
        "summary": "Remove all keys from the current database",
        "complexity": "O(N) where N is the number of keys in the selected database",
        "group": "server",
        "since": "1.0.0",
        "arity": -1,
        "function": "flushdbCommand",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "keyspace",
            "dangerous"
        ],
        "arguments": [
            {
                "name": "async",
                "type": "oneof",
                "value": [
                    {
                        "name": "async",
                        "type": "pure-token",
                        "token": "ASYNC"
                    },
                    {
                        "name": "sync",
                        "type": "pure-token",
                        "token": "SYNC"
                    }
                ],
                "optional": true
            }
        ]
    },
    "GEOADD": {
        "summary": "Add one or more geospatial items in the geospatial index represented using a sorted set",
        "complexity": "O(log(N)) for each item added, where N is the number of elements in the sorted set.",
        "group": "geo",
        "since": "3.2.0",
        "arity": -5,
        "function": "geoaddCommand",
        "history": [
            [
                "6.2",
                "Added the `CH`, `NX` and `XX` options."
            ]
        ],
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "geo"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "condition",
                "type": "oneof",
                "value": [
                    {
                        "name": "nx",
                        "type": "pure-token",
                        "token": "NX"
                    },
                    {
                        "name": "xx",
                        "type": "pure-token",
                        "token": "XX"
                    }
                ],
                "optional": true
            },
            {
                "name": "change",
                "token": "CH",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "longitude_latitude_member",
                "type": "block",
                "value": [
                    {
                        "name": "longitude",
                        "type": "double",
                        "value": "longitude"
                    },
                    {
                        "name": "latitude",
                        "type": "double",
                        "value": "latitude"
                    },
                    {
                        "name": "member",
                        "type": "string",
                        "value": "member"
                    }
                ],
                "multiple": true
            }
        ]
    },
    "GEODIST": {
        "summary": "Returns the distance between two members of a geospatial index",
        "complexity": "O(log(N))",
        "group": "geo",
        "since": "3.2.0",
        "arity": -4,
        "function": "geodistCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "geo"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "member1",
                "type": "string",
                "value": "member1"
            },
            {
                "name": "member2",
                "type": "string",
                "value": "member2"
            },
            {
                "name": "unit",
                "type": "oneof",
                "value": [
                    {
                        "name": "m",
                        "type": "pure-token",
                        "token": "m"
                    },
                    {
                        "name": "km",
                        "type": "pure-token",
                        "token": "km"
                    },
                    {
                        "name": "ft",
                        "type": "pure-token",
                        "token": "ft"
                    },
                    {
                        "name": "mi",
                        "type": "pure-token",
                        "token": "mi"
                    }
                ],
                "optional": true
            }
        ]
    },
    "GEOHASH": {
        "summary": "Returns members of a geospatial index as standard geohash strings",
        "complexity": "O(log(N)) for each member requested, where N is the number of elements in the sorted set.",
        "group": "geo",
        "since": "3.2.0",
        "arity": -2,
        "function": "geohashCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "geo"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "member",
                "type": "string",
                "value": "member",
                "multiple": true
            }
        ]
    },
    "GEOPOS": {
        "summary": "Returns longitude and latitude of members of a geospatial index",
        "complexity": "O(N) where N is the number of members requested.",
        "group": "geo",
        "since": "3.2.0",
        "arity": -2,
        "function": "geoposCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "geo"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "member",
                "type": "string",
                "value": "member",
                "multiple": true
            }
        ]
    },
    "GEORADIUS": {
        "summary": "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point",
        "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
        "group": "geo",
        "since": "3.2.0",
        "arity": -6,
        "function": "georadiusCommand",
        "get_keys_function": "georadiusGetKeys",
        "history": [
            [
                "6.2",
                "Added the `ANY` option for `COUNT`."
            ]
        ],
        "deprecated_since": "6.2.0",
        "replaced_by": "`GEOSEARCH` and `GEOSEARCHSTORE` with the `BYRADIUS` argument",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "geo"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "keyword": {
                        "keyword": "STORE",
                        "startfrom": 6
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "keyword": {
                        "keyword": "STOREDIST",
                        "startfrom": 6
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "longitude",
                "type": "double",
                "value": "longitude"
            },
            {
                "name": "latitude",
                "type": "double",
                "value": "latitude"
            },
            {
                "name": "radius",
                "type": "double",
                "value": "radius"
            },
            {
                "name": "unit",
                "type": "oneof",
                "value": [
                    {
                        "name": "m",
                        "type": "pure-token",
                        "token": "m"
                    },
                    {
                        "name": "km",
                        "type": "pure-token",
                        "token": "km"
                    },
                    {
                        "name": "ft",
                        "type": "pure-token",
                        "token": "ft"
                    },
                    {
                        "name": "mi",
                        "type": "pure-token",
                        "token": "mi"
                    }
                ]
            },
            {
                "name": "withcoord",
                "token": "WITHCOORD",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "withdist",
                "token": "WITHDIST",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "withhash",
                "token": "WITHHASH",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "count",
                "type": "block",
                "value": [
                    {
                        "token": "COUNT",
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    },
                    {
                        "name": "any",
                        "token": "ANY",
                        "type": "pure-token",
                        "optional": true
                    }
                ],
                "optional": true
            },
            {
                "name": "order",
                "type": "oneof",
                "value": [
                    {
                        "name": "asc",
                        "type": "pure-token",
                        "token": "ASC"
                    },
                    {
                        "name": "desc",
                        "type": "pure-token",
                        "token": "DESC"
                    }
                ],
                "optional": true
            },
            {
                "token": "STORE",
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 1,
                "optional": true
            },
            {
                "token": "STOREDIST",
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 2,
                "optional": true
            }
        ]
    },
    "GEORADIUS_RO": {
        "summary": "A read-only variant for GEORADIUS",
        "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
        "group": "geo",
        "since": "5.0.0",
        "arity": -6,
        "function": "georadiusroCommand",
        "deprecated_since": "6.2.0",
        "replaced_by": "`GEOSEARCH` with the `BYRADIUS` argument",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "geo"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ]
    },
    "GEORADIUSBYMEMBER": {
        "summary": "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member",
        "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
        "group": "geo",
        "since": "3.2.0",
        "arity": -5,
        "function": "georadiusbymemberCommand",
        "get_keys_function": "georadiusGetKeys",
        "deprecated_since": "6.2.0",
        "replaced_by": "`GEOSEARCH` and `GEOSEARCHSTORE` with the `BYRADIUS` and `FROMMEMBER` arguments",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "geo"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "keyword": {
                        "keyword": "STORE",
                        "startfrom": 5
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "keyword": {
                        "keyword": "STOREDIST",
                        "startfrom": 5
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "member",
                "type": "string",
                "value": "member"
            },
            {
                "name": "radius",
                "type": "double",
                "value": "radius"
            },
            {
                "name": "unit",
                "type": "oneof",
                "value": [
                    {
                        "name": "m",
                        "type": "pure-token",
                        "token": "m"
                    },
                    {
                        "name": "km",
                        "type": "pure-token",
                        "token": "km"
                    },
                    {
                        "name": "ft",
                        "type": "pure-token",
                        "token": "ft"
                    },
                    {
                        "name": "mi",
                        "type": "pure-token",
                        "token": "mi"
                    }
                ]
            },
            {
                "name": "withcoord",
                "token": "WITHCOORD",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "withdist",
                "token": "WITHDIST",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "withhash",
                "token": "WITHHASH",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "count",
                "type": "block",
                "value": [
                    {
                        "token": "COUNT",
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    },
                    {
                        "name": "any",
                        "token": "ANY",
                        "type": "pure-token",
                        "optional": true
                    }
                ],
                "optional": true
            },
            {
                "name": "order",
                "type": "oneof",
                "value": [
                    {
                        "name": "asc",
                        "type": "pure-token",
                        "token": "ASC"
                    },
                    {
                        "name": "desc",
                        "type": "pure-token",
                        "token": "DESC"
                    }
                ],
                "optional": true
            },
            {
                "token": "STORE",
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 1,
                "optional": true
            },
            {
                "token": "STOREDIST",
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 2,
                "optional": true
            }
        ]
    },
    "GEORADIUSBYMEMBER_RO": {
        "summary": "A read-only variant for GEORADIUSBYMEMBER",
        "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
        "group": "geo",
        "since": "5.0.0",
        "arity": -5,
        "function": "georadiusbymemberroCommand",
        "deprecated_since": "6.2.0",
        "replaced_by": "`GEOSEARCH` with the `BYRADIUS` and `FROMMEMBER` arguments",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "geo"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ]
    },
    "GEOSEARCH": {
        "summary": "Query a sorted set representing a geospatial index to fetch members inside an area of a box or a circle.",
        "complexity": "O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape",
        "group": "geo",
        "since": "6.2",
        "arity": -7,
        "function": "geosearchCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "geo"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "token": "FROMMEMBER",
                "name": "member",
                "type": "string",
                "value": "member",
                "optional": true
            },
            {
                "token": "FROMLONLAT",
                "name": "longitude_latitude",
                "type": "block",
                "value": [
                    {
                        "name": "longitude",
                        "type": "double",
                        "value": "longitude"
                    },
                    {
                        "name": "latitude",
                        "type": "double",
                        "value": "latitude"
                    }
                ],
                "optional": true
            },
            {
                "name": "circle",
                "type": "block",
                "value": [
                    {
                        "token": "BYRADIUS",
                        "name": "radius",
                        "type": "double",
                        "value": "radius"
                    },
                    {
                        "name": "unit",
                        "type": "oneof",
                        "value": [
                            {
                                "name": "m",
                                "type": "pure-token",
                                "token": "m"
                            },
                            {
                                "name": "km",
                                "type": "pure-token",
                                "token": "km"
                            },
                            {
                                "name": "ft",
                                "type": "pure-token",
                                "token": "ft"
                            },
                            {
                                "name": "mi",
                                "type": "pure-token",
                                "token": "mi"
                            }
                        ]
                    }
                ],
                "optional": true
            },
            {
                "name": "box",
                "type": "block",
                "value": [
                    {
                        "token": "BYBOX",
                        "name": "width",
                        "type": "double",
                        "value": "width"
                    },
                    {
                        "name": "height",
                        "type": "double",
                        "value": "height"
                    },
                    {
                        "name": "unit",
                        "type": "oneof",
                        "value": [
                            {
                                "name": "m",
                                "type": "pure-token",
                                "token": "m"
                            },
                            {
                                "name": "km",
                                "type": "pure-token",
                                "token": "km"
                            },
                            {
                                "name": "ft",
                                "type": "pure-token",
                                "token": "ft"
                            },
                            {
                                "name": "mi",
                                "type": "pure-token",
                                "token": "mi"
                            }
                        ]
                    }
                ],
                "optional": true
            },
            {
                "name": "order",
                "type": "oneof",
                "value": [
                    {
                        "name": "asc",
                        "type": "pure-token",
                        "token": "ASC"
                    },
                    {
                        "name": "desc",
                        "type": "pure-token",
                        "token": "DESC"
                    }
                ],
                "optional": true
            },
            {
                "name": "count",
                "type": "block",
                "value": [
                    {
                        "token": "COUNT",
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    },
                    {
                        "name": "any",
                        "token": "ANY",
                        "type": "pure-token",
                        "optional": true
                    }
                ],
                "optional": true
            },
            {
                "name": "withcoord",
                "token": "WITHCOORD",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "withdist",
                "token": "WITHDIST",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "withhash",
                "token": "WITHHASH",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "GEOSEARCHSTORE": {
        "summary": "Query a sorted set representing a geospatial index to fetch members inside an area of a box or a circle, and store the result in another key.",
        "complexity": "O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape",
        "group": "geo",
        "since": "6.2",
        "arity": -8,
        "function": "geosearchstoreCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "geo"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 0
            },
            {
                "name": "source",
                "type": "key",
                "value": "source",
                "key_spec_index": 1
            },
            {
                "token": "FROMMEMBER",
                "name": "member",
                "type": "string",
                "value": "member",
                "optional": true
            },
            {
                "token": "FROMLONLAT",
                "name": "longitude_latitude",
                "type": "block",
                "value": [
                    {
                        "name": "longitude",
                        "type": "double",
                        "value": "longitude"
                    },
                    {
                        "name": "latitude",
                        "type": "double",
                        "value": "latitude"
                    }
                ],
                "optional": true
            },
            {
                "name": "circle",
                "type": "block",
                "value": [
                    {
                        "token": "BYRADIUS",
                        "name": "radius",
                        "type": "double",
                        "value": "radius"
                    },
                    {
                        "name": "unit",
                        "type": "oneof",
                        "value": [
                            {
                                "name": "m",
                                "type": "pure-token",
                                "token": "m"
                            },
                            {
                                "name": "km",
                                "type": "pure-token",
                                "token": "km"
                            },
                            {
                                "name": "ft",
                                "type": "pure-token",
                                "token": "ft"
                            },
                            {
                                "name": "mi",
                                "type": "pure-token",
                                "token": "mi"
                            }
                        ]
                    }
                ],
                "optional": true
            },
            {
                "name": "box",
                "type": "block",
                "value": [
                    {
                        "token": "BYBOX",
                        "name": "width",
                        "type": "double",
                        "value": "width"
                    },
                    {
                        "name": "height",
                        "type": "double",
                        "value": "height"
                    },
                    {
                        "name": "unit",
                        "type": "oneof",
                        "value": [
                            {
                                "name": "m",
                                "type": "pure-token",
                                "token": "m"
                            },
                            {
                                "name": "km",
                                "type": "pure-token",
                                "token": "km"
                            },
                            {
                                "name": "ft",
                                "type": "pure-token",
                                "token": "ft"
                            },
                            {
                                "name": "mi",
                                "type": "pure-token",
                                "token": "mi"
                            }
                        ]
                    }
                ],
                "optional": true
            },
            {
                "name": "order",
                "type": "oneof",
                "value": [
                    {
                        "name": "asc",
                        "type": "pure-token",
                        "token": "ASC"
                    },
                    {
                        "name": "desc",
                        "type": "pure-token",
                        "token": "DESC"
                    }
                ],
                "optional": true
            },
            {
                "name": "count",
                "type": "block",
                "value": [
                    {
                        "token": "COUNT",
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    },
                    {
                        "name": "any",
                        "token": "ANY",
                        "type": "pure-token",
                        "optional": true
                    }
                ],
                "optional": true
            },
            {
                "name": "storedist",
                "token": "STOREDIST",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "GET": {
        "summary": "Get the value of a key",
        "complexity": "O(1)",
        "group": "string",
        "since": "1.0.0",
        "arity": 2,
        "function": "getCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "GETBIT": {
        "summary": "Returns the bit value at offset in the string value stored at key",
        "complexity": "O(1)",
        "group": "bitmap",
        "since": "2.2.0",
        "arity": 3,
        "function": "getbitCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "bitmap"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "offset",
                "type": "integer",
                "value": "offset"
            }
        ]
    },
    "GETDEL": {
        "summary": "Get the value of a key and delete the key",
        "complexity": "O(1)",
        "group": "string",
        "since": "6.2.0",
        "arity": 2,
        "function": "getdelCommand",
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "GETEX": {
        "summary": "Get the value of a key and optionally set its expiration",
        "complexity": "O(1)",
        "group": "string",
        "since": "6.2.0",
        "arity": -2,
        "function": "getexCommand",
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "expiration",
                "type": "oneof",
                "value": [
                    {
                        "name": "ex",
                        "type": "integer",
                        "value": "seconds",
                        "token": "EX"
                    },
                    {
                        "name": "px",
                        "type": "integer",
                        "value": "milliseconds",
                        "token": "PX"
                    },
                    {
                        "name": "exat",
                        "type": "integer",
                        "value": "unix-time",
                        "token": "EXAT"
                    },
                    {
                        "name": "pxat",
                        "type": "integer",
                        "value": "unix-time",
                        "token": "PXAT"
                    },
                    {
                        "name": "persist",
                        "type": "pure-token",
                        "token": "PERSIST"
                    }
                ],
                "optional": true
            }
        ]
    },
    "GETRANGE": {
        "summary": "Get a substring of the string stored at a key",
        "complexity": "O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.",
        "group": "string",
        "since": "2.4.0",
        "arity": 4,
        "function": "getrangeCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "start",
                "type": "integer",
                "value": "start"
            },
            {
                "name": "end",
                "type": "integer",
                "value": "end"
            }
        ]
    },
    "GETSET": {
        "summary": "Set the string value of a key and return its old value",
        "complexity": "O(1)",
        "group": "string",
        "since": "1.0.0",
        "arity": 3,
        "function": "getsetCommand",
        "deprecated_since": "6.2.0",
        "replaced_by": "`SET` with the `!GET` argument",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write",
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "value",
                "type": "string",
                "value": "value"
            }
        ]
    },
    "HELLO": {
        "summary": "Handshake with Redis",
        "complexity": "O(1)",
        "group": "connection",
        "since": "6.0.0",
        "arity": -1,
        "function": "helloCommand",
        "history": [
            [
                "6.2",
                "`protover` made optional; when called without arguments the command reports the current connection's context."
            ]
        ],
        "command_flags": [
            "noscript",
            "loading",
            "stale",
            "fast",
            "no_auth",
            "sentinel"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "arguments",
                "type": "block",
                "value": [
                    {
                        "name": "protover",
                        "type": "integer",
                        "value": "protover"
                    },
                    {
                        "token": "AUTH",
                        "name": "username_password",
                        "type": "block",
                        "value": [
                            {
                                "name": "username",
                                "type": "string",
                                "value": "username"
                            },
                            {
                                "name": "password",
                                "type": "string",
                                "value": "password"
                            }
                        ],
                        "optional": true
                    },
                    {
                        "token": "SETNAME",
                        "name": "clientname",
                        "type": "string",
                        "value": "clientname",
                        "optional": true
                    }
                ],
                "optional": true
            }
        ]
    },
    "HDEL": {
        "summary": "Delete one or more hash fields",
        "complexity": "O(N) where N is the number of fields to be removed.",
        "group": "hash",
        "since": "2.0.0",
        "arity": -3,
        "function": "hdelCommand",
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "field",
                "type": "string",
                "value": "field",
                "multiple": true
            }
        ]
    },
    "HEXISTS": {
        "summary": "Determine if a hash field exists",
        "complexity": "O(1)",
        "group": "hash",
        "since": "2.0.0",
        "arity": 3,
        "function": "hexistsCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "field",
                "type": "string",
                "value": "field"
            }
        ]
    },
    "HGET": {
        "summary": "Get the value of a hash field",
        "complexity": "O(1)",
        "group": "hash",
        "since": "2.0.0",
        "arity": 3,
        "function": "hgetCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "field",
                "type": "string",
                "value": "field"
            }
        ]
    },
    "HINCRBY": {
        "summary": "Increment the integer value of a hash field by the given number",
        "complexity": "O(1)",
        "group": "hash",
        "since": "2.0.0",
        "arity": 4,
        "function": "hincrbyCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "field",
                "type": "string",
                "value": "field"
            },
            {
                "name": "increment",
                "type": "integer",
                "value": "increment"
            }
        ]
    },
    "HKEYS": {
        "summary": "Get all the fields in a hash",
        "complexity": "O(N) where N is the size of the hash.",
        "group": "hash",
        "since": "2.0.0",
        "arity": 2,
        "function": "hkeysCommand",
        "command_flags": [
            "readonly",
            "sort_for_script"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "HGETALL": {
        "summary": "Get all the fields and values in a hash",
        "complexity": "O(N) where N is the size of the hash.",
        "group": "hash",
        "since": "2.0.0",
        "arity": 2,
        "function": "hgetallCommand",
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "HINCRBYFLOAT": {
        "summary": "Increment the float value of a hash field by the given amount",
        "complexity": "O(1)",
        "group": "hash",
        "since": "2.6.0",
        "arity": 4,
        "function": "hincrbyfloatCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "field",
                "type": "string",
                "value": "field"
            },
            {
                "name": "increment",
                "type": "double",
                "value": "increment"
            }
        ]
    },
    "HLEN": {
        "summary": "Get the number of fields in a hash",
        "complexity": "O(1)",
        "group": "hash",
        "since": "2.0.0",
        "arity": 2,
        "function": "hlenCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "HMGET": {
        "summary": "Get the values of all the given hash fields",
        "complexity": "O(N) where N is the number of fields being requested.",
        "group": "hash",
        "since": "2.0.0",
        "arity": -3,
        "function": "hmgetCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "field",
                "type": "string",
                "value": "field",
                "multiple": true
            }
        ]
    },
    "HMSET": {
        "summary": "Set multiple hash fields to multiple values",
        "complexity": "O(N) where N is the number of fields being set.",
        "group": "hash",
        "since": "2.0.0",
        "arity": -4,
        "function": "hsetCommand",
        "deprecated_since": "4.0.0",
        "replaced_by": "`HSET` with multiple field-value pairs",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "field_value",
                "type": "block",
                "value": [
                    {
                        "name": "field",
                        "type": "string",
                        "value": "field"
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "value": "value"
                    }
                ],
                "multiple": true
            }
        ]
    },
    "HRANDFIELD": {
        "summary": "Get one or multiple random fields from a hash",
        "complexity": "O(N) where N is the number of fields returned",
        "group": "hash",
        "since": "6.2.0",
        "arity": -2,
        "function": "hrandfieldCommand",
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "options",
                "type": "block",
                "value": [
                    {
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    },
                    {
                        "name": "withvalues",
                        "token": "WITHVALUES",
                        "type": "pure-token",
                        "optional": true
                    }
                ],
                "optional": true
            }
        ]
    },
    "HSCAN": {
        "summary": "Incrementally iterate hash fields and associated values",
        "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..",
        "group": "hash",
        "since": "2.8.0",
        "arity": -3,
        "function": "hscanCommand",
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "cursor",
                "type": "integer",
                "value": "cursor"
            },
            {
                "token": "MATCH",
                "name": "pattern",
                "type": "pattern",
                "value": "pattern",
                "optional": true
            },
            {
                "token": "COUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "HSET": {
        "summary": "Set the string value of a hash field",
        "complexity": "O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.",
        "group": "hash",
        "since": "2.0.0",
        "arity": -4,
        "function": "hsetCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "field_value",
                "type": "block",
                "value": [
                    {
                        "name": "field",
                        "type": "string",
                        "value": "field"
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "value": "value"
                    }
                ],
                "multiple": true
            }
        ]
    },
    "HSETNX": {
        "summary": "Set the value of a hash field, only if the field does not exist",
        "complexity": "O(1)",
        "group": "hash",
        "since": "2.0.0",
        "arity": 4,
        "function": "hsetnxCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "field",
                "type": "string",
                "value": "field"
            },
            {
                "name": "value",
                "type": "string",
                "value": "value"
            }
        ]
    },
    "HSTRLEN": {
        "summary": "Get the length of the value of a hash field",
        "complexity": "O(1)",
        "group": "hash",
        "since": "3.2.0",
        "arity": 3,
        "function": "hstrlenCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "field",
                "type": "string",
                "value": "field"
            }
        ]
    },
    "HVALS": {
        "summary": "Get all the values in a hash",
        "complexity": "O(N) where N is the size of the hash.",
        "group": "hash",
        "since": "2.0.0",
        "arity": 2,
        "function": "hvalsCommand",
        "command_flags": [
            "readonly",
            "sort_for_script"
        ],
        "acl_categories": [
            "hash"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "INCR": {
        "summary": "Increment the integer value of a key by one",
        "complexity": "O(1)",
        "group": "string",
        "since": "1.0.0",
        "arity": 2,
        "function": "incrCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "INCRBY": {
        "summary": "Increment the integer value of a key by the given amount",
        "complexity": "O(1)",
        "group": "string",
        "since": "1.0.0",
        "arity": 3,
        "function": "incrbyCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "increment",
                "type": "integer",
                "value": "increment"
            }
        ]
    },
    "INCRBYFLOAT": {
        "summary": "Increment the float value of a key by the given amount",
        "complexity": "O(1)",
        "group": "string",
        "since": "2.6.0",
        "arity": 3,
        "function": "incrbyfloatCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "increment",
                "type": "double",
                "value": "increment"
            }
        ]
    },
    "INFO": {
        "summary": "Get information and statistics about the server",
        "complexity": "PATCH__TBD__37__",
        "group": "server",
        "since": "1.0.0",
        "arity": -1,
        "function": "infoCommand",
        "command_flags": [
            "random",
            "loading",
            "stale",
            "sentinel"
        ],
        "acl_categories": [
            "dangerous"
        ],
        "arguments": [
            {
                "name": "section",
                "type": "string",
                "value": "section",
                "optional": true
            }
        ]
    },
    "KEYS": {
        "summary": "Find all keys matching the given pattern",
        "complexity": "O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.",
        "group": "generic",
        "since": "1.0.0",
        "arity": 2,
        "function": "keysCommand",
        "command_flags": [
            "readonly",
            "sort_for_script"
        ],
        "acl_categories": [
            "keyspace",
            "dangerous"
        ],
        "arguments": [
            {
                "name": "pattern",
                "type": "pattern",
                "value": "pattern"
            }
        ]
    },
    "LASTSAVE": {
        "summary": "Get the UNIX time stamp of the last successful save to disk",
        "complexity": "PATCH__TBD__49__",
        "group": "server",
        "since": "1.0.0",
        "arity": 1,
        "function": "lastsaveCommand",
        "command_flags": [
            "random",
            "loading",
            "stale",
            "fast"
        ],
        "acl_categories": [
            "admin",
            "dangerous"
        ]
    },
    "LATENCY DOCTOR": {
        "summary": "Return a human readable latency analysis report.",
        "complexity": "PATCH__TBD__42__",
        "group": "server",
        "since": "2.8.13",
        "arity": 2,
        "container": "LATENCY",
        "function": "latencyCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ]
    },
    "LATENCY GRAPH": {
        "summary": "Return a latency graph for the event.",
        "complexity": "PATCH__TBD__41__",
        "group": "server",
        "since": "2.8.13",
        "arity": 3,
        "container": "LATENCY",
        "function": "latencyCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ],
        "arguments": [
            {
                "name": "event",
                "type": "string",
                "value": "event"
            }
        ]
    },
    "LATENCY HELP": {
        "summary": "Show helpful text about the different subcommands.",
        "complexity": "O(1)",
        "group": "server",
        "since": "2.8.13",
        "arity": 2,
        "container": "LATENCY",
        "function": "latencyCommand",
        "command_flags": [
            "loading",
            "stale"
        ]
    },
    "LATENCY HISTORY": {
        "summary": "Return timestamp-latency samples for the event.",
        "complexity": "PATCH__TBD__40__",
        "group": "server",
        "since": "2.8.13",
        "arity": 3,
        "container": "LATENCY",
        "function": "latencyCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ],
        "arguments": [
            {
                "name": "event",
                "type": "string",
                "value": "event"
            }
        ]
    },
    "LATENCY LATEST": {
        "summary": "Return the latest latency samples for all events.",
        "complexity": "PATCH__TBD__44__",
        "group": "server",
        "since": "2.8.13",
        "arity": 2,
        "container": "LATENCY",
        "function": "latencyCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ]
    },
    "LATENCY": {
        "summary": "A container for latency diagnostics commands",
        "complexity": "Depends on subcommand.",
        "group": "server",
        "since": "2.8.13",
        "arity": -2
    },
    "LCS": {
        "summary": "__TBD__3__",
        "complexity": "__TBD__2__",
        "group": "__TBD__4__",
        "since": "__TBD__5__",
        "arity": -3,
        "function": "lcsCommand",
        "get_keys_function": "lcsGetKeys",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ]
    },
    "LATENCY RESET": {
        "summary": "Reset latency data for one or more events.",
        "complexity": "PATCH__TBD__43__",
        "group": "server",
        "since": "2.8.13",
        "arity": -2,
        "container": "LATENCY",
        "function": "latencyCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ],
        "arguments": [
            {
                "name": "event",
                "type": "string",
                "value": "event",
                "optional": true,
                "multiple": true
            }
        ]
    },
    "LINDEX": {
        "summary": "Get an element from a list by its index",
        "complexity": "O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).",
        "group": "list",
        "since": "1.0.0",
        "arity": 3,
        "function": "lindexCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "index",
                "type": "integer",
                "value": "index"
            }
        ]
    },
    "LINSERT": {
        "summary": "Insert an element before or after another element in a list",
        "complexity": "O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).",
        "group": "list",
        "since": "2.2.0",
        "arity": 5,
        "function": "linsertCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "where",
                "type": "oneof",
                "value": [
                    {
                        "name": "before",
                        "type": "pure-token",
                        "token": "BEFORE"
                    },
                    {
                        "name": "after",
                        "type": "pure-token",
                        "token": "AFTER"
                    }
                ]
            },
            {
                "name": "pivot",
                "type": "string",
                "value": "pivot"
            },
            {
                "name": "element",
                "type": "string",
                "value": "element"
            }
        ]
    },
    "LLEN": {
        "summary": "Get the length of a list",
        "complexity": "O(1)",
        "group": "list",
        "since": "1.0.0",
        "arity": 2,
        "function": "llenCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "LMOVE": {
        "summary": "Pop an element from a list, push it to another list and return it",
        "complexity": "O(1)",
        "group": "list",
        "since": "6.2.0",
        "arity": 5,
        "function": "lmoveCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "write",
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "source",
                "type": "key",
                "value": "source",
                "key_spec_index": 0
            },
            {
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 1
            },
            {
                "name": "wherefrom",
                "type": "oneof",
                "value": [
                    {
                        "name": "left",
                        "type": "pure-token",
                        "token": "LEFT"
                    },
                    {
                        "name": "right",
                        "type": "pure-token",
                        "token": "RIGHT"
                    }
                ]
            },
            {
                "name": "whereto",
                "type": "oneof",
                "value": [
                    {
                        "name": "left",
                        "type": "pure-token",
                        "token": "LEFT"
                    },
                    {
                        "name": "right",
                        "type": "pure-token",
                        "token": "RIGHT"
                    }
                ]
            }
        ]
    },
    "LMPOP": {
        "summary": "Pop elements from a list",
        "complexity": "O(N+M) where N is the number of provided keys and M is the number of elements returned.",
        "group": "list",
        "since": "7.0.0",
        "arity": -4,
        "function": "lmpopCommand",
        "get_keys_function": "lmpopGetKeys",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "name": "where",
                "type": "oneof",
                "value": [
                    {
                        "name": "left",
                        "type": "pure-token",
                        "token": "LEFT"
                    },
                    {
                        "name": "right",
                        "type": "pure-token",
                        "token": "RIGHT"
                    }
                ]
            },
            {
                "token": "COUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "LOLWUT": {
        "summary": "Display some computer art and the Redis version",
        "complexity": "PATCH__TBD__68__",
        "group": "server",
        "since": "5.0.0",
        "arity": -1,
        "function": "lolwutCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "arguments": [
            {
                "token": "VERSION",
                "name": "version",
                "type": "integer",
                "value": "version",
                "optional": true
            }
        ]
    },
    "LPOP": {
        "summary": "Remove and get the first elements in a list",
        "complexity": "O(N) where N is the number of elements returned",
        "group": "list",
        "since": "1.0.0",
        "arity": -2,
        "function": "lpopCommand",
        "history": [
            [
                "6.2",
                "Added the `count` argument."
            ]
        ],
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "LPOS": {
        "summary": "Return the index of matching elements on a list",
        "complexity": "O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.",
        "group": "list",
        "since": "6.0.6",
        "arity": -3,
        "function": "lposCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "element",
                "type": "string",
                "value": "element"
            },
            {
                "token": "RANK",
                "name": "rank",
                "type": "integer",
                "value": "rank",
                "optional": true
            },
            {
                "token": "COUNT",
                "name": "num-matches",
                "type": "integer",
                "value": "num-matches",
                "optional": true
            },
            {
                "token": "MAXLEN",
                "name": "len",
                "type": "integer",
                "value": "len",
                "optional": true
            }
        ]
    },
    "LPUSH": {
        "summary": "Prepend one or multiple elements to a list",
        "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
        "group": "list",
        "since": "1.0.0",
        "arity": -3,
        "function": "lpushCommand",
        "history": [
            [
                "2.4",
                "Accepts multiple `element` arguments."
            ]
        ],
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "element",
                "type": "string",
                "value": "element",
                "multiple": true
            }
        ]
    },
    "LPUSHX": {
        "summary": "Prepend an element to a list, only if the list exists",
        "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
        "group": "list",
        "since": "2.2.0",
        "arity": -3,
        "function": "lpushxCommand",
        "history": [
            [
                "4.0",
                "Accepts multiple `element` arguments."
            ]
        ],
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "element",
                "type": "string",
                "value": "element",
                "multiple": true
            }
        ]
    },
    "LRANGE": {
        "summary": "Get a range of elements from a list",
        "complexity": "O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.",
        "group": "list",
        "since": "1.0.0",
        "arity": 4,
        "function": "lrangeCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "start",
                "type": "integer",
                "value": "start"
            },
            {
                "name": "stop",
                "type": "integer",
                "value": "stop"
            }
        ]
    },
    "LREM": {
        "summary": "Remove elements from a list",
        "complexity": "O(N+M) where N is the length of the list and M is the number of elements removed.",
        "group": "list",
        "since": "1.0.0",
        "arity": 4,
        "function": "lremCommand",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "count",
                "type": "integer",
                "value": "count"
            },
            {
                "name": "element",
                "type": "string",
                "value": "element"
            }
        ]
    },
    "LSET": {
        "summary": "Set the value of an element in a list by its index",
        "complexity": "O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).",
        "group": "list",
        "since": "1.0.0",
        "arity": 4,
        "function": "lsetCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "index",
                "type": "integer",
                "value": "index"
            },
            {
                "name": "element",
                "type": "string",
                "value": "element"
            }
        ]
    },
    "LTRIM": {
        "summary": "Trim a list to the specified range",
        "complexity": "O(N) where N is the number of elements to be removed by the operation.",
        "group": "list",
        "since": "1.0.0",
        "arity": 4,
        "function": "ltrimCommand",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "start",
                "type": "integer",
                "value": "start"
            },
            {
                "name": "stop",
                "type": "integer",
                "value": "stop"
            }
        ]
    },
    "MEMORY DOCTOR": {
        "summary": "Outputs memory problems report",
        "complexity": "PATCH__TBD__73__",
        "group": "server",
        "since": "4.0.0",
        "arity": 2,
        "container": "MEMORY",
        "function": "memoryCommand",
        "command_flags": [
            "random"
        ]
    },
    "MEMORY HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "server",
        "since": "4.0.0",
        "arity": 2,
        "container": "MEMORY",
        "function": "memoryCommand",
        "command_flags": [
            "loading",
            "stale"
        ]
    },
    "MEMORY MALLOC-STATS": {
        "summary": "Show allocator internal stats",
        "complexity": "PATCH__TBD__71__",
        "group": "server",
        "since": "4.0.0",
        "arity": 2,
        "container": "MEMORY",
        "function": "memoryCommand",
        "command_flags": [
            "random"
        ]
    },
    "MEMORY PURGE": {
        "summary": "Ask the allocator to release memory",
        "complexity": "PATCH__TBD__70__",
        "group": "server",
        "since": "4.0.0",
        "arity": 2,
        "container": "MEMORY",
        "function": "memoryCommand"
    },
    "MEMORY STATS": {
        "summary": "Show memory usage details",
        "complexity": "PATCH__TBD__72__",
        "group": "server",
        "since": "4.0.0",
        "arity": 2,
        "container": "MEMORY",
        "function": "memoryCommand",
        "command_flags": [
            "random"
        ]
    },
    "MEMORY USAGE": {
        "summary": "Estimate the memory usage of a key",
        "complexity": "O(N) where N is the number of samples.",
        "group": "server",
        "since": "4.0.0",
        "arity": -3,
        "container": "MEMORY",
        "function": "memoryCommand",
        "command_flags": [
            "readonly"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "token": "SAMPLES",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "MEMORY": {
        "summary": "A container for memory diagnostics commands",
        "complexity": "Depends on subcommand.",
        "group": "server",
        "since": "4.0.0",
        "arity": -2
    },
    "MGET": {
        "summary": "Get the values of all the given keys",
        "complexity": "O(N) where N is the number of keys to retrieve.",
        "group": "string",
        "since": "1.0.0",
        "arity": -2,
        "function": "mgetCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            }
        ]
    },
    "MIGRATE": {
        "summary": "Atomically transfer a key from a Redis instance to another one.",
        "complexity": "This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.",
        "group": "generic",
        "since": "2.6.0",
        "arity": -6,
        "function": "migrateCommand",
        "get_keys_function": "migrateGetKeys",
        "history": [
            [
                "3.0.0",
                "Added the `COPY` and `REPLACE` options."
            ],
            [
                "3.0.6",
                "Added the `KEYS` option."
            ],
            [
                "4.0.7",
                "Added the `AUTH` option."
            ],
            [
                "6.0.0",
                "Added the `AUTH2` option."
            ]
        ],
        "command_flags": [
            "write",
            "random"
        ],
        "acl_categories": [
            "keyspace",
            "dangerous"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 3
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "write",
                    "incomplete"
                ],
                "begin_search": {
                    "keyword": {
                        "keyword": "KEYS",
                        "startfrom": -2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "host",
                "type": "string",
                "value": "host"
            },
            {
                "name": "port",
                "type": "string",
                "value": "port"
            },
            {
                "name": "key_or_empty_string",
                "type": "oneof",
                "value": [
                    {
                        "name": "key",
                        "type": "key",
                        "value": "key"
                    },
                    {
                        "name": "empty_string",
                        "type": "pure-token",
                        "token": "\"\""
                    }
                ]
            },
            {
                "name": "destination-db",
                "type": "integer",
                "value": "destination-db"
            },
            {
                "name": "timeout",
                "type": "integer",
                "value": "timeout"
            },
            {
                "name": "copy",
                "token": "COPY",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "replace",
                "token": "REPLACE",
                "type": "pure-token",
                "optional": true
            },
            {
                "token": "AUTH",
                "name": "password",
                "type": "string",
                "value": "password",
                "optional": true
            },
            {
                "token": "AUTH2",
                "name": "username_password",
                "type": "block",
                "value": [
                    {
                        "name": "username",
                        "type": "string",
                        "value": "username"
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "value": "password"
                    }
                ],
                "optional": true
            },
            {
                "token": "KEYS",
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "optional": true,
                "multiple": true
            }
        ]
    },
    "MODULE HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "server",
        "since": "5.0.0",
        "arity": 2,
        "container": "MODULE",
        "function": "moduleCommand",
        "command_flags": [
            "loading",
            "stale"
        ]
    },
    "MODULE LIST": {
        "summary": "List all modules loaded by the server",
        "complexity": "O(N) where N is the number of loaded modules.",
        "group": "server",
        "since": "4.0.0",
        "arity": 2,
        "container": "MODULE",
        "function": "moduleCommand",
        "command_flags": [
            "admin",
            "noscript"
        ]
    },
    "MODULE LOAD": {
        "summary": "Load a module",
        "complexity": "O(1)",
        "group": "server",
        "since": "4.0.0",
        "arity": -3,
        "container": "MODULE",
        "function": "moduleCommand",
        "command_flags": [
            "admin",
            "noscript"
        ],
        "arguments": [
            {
                "name": "path",
                "type": "string",
                "value": "path"
            },
            {
                "name": "arg",
                "type": "string",
                "value": "arg",
                "optional": true,
                "multiple": true
            }
        ]
    },
    "MODULE": {
        "summary": "A container for module commands",
        "complexity": "Depends on subcommand.",
        "group": "server",
        "since": "4.0.0",
        "arity": -2
    },
    "MODULE UNLOAD": {
        "summary": "Unload a module",
        "complexity": "O(1)",
        "group": "server",
        "since": "4.0.0",
        "arity": 3,
        "container": "MODULE",
        "function": "moduleCommand",
        "command_flags": [
            "admin",
            "noscript"
        ],
        "arguments": [
            {
                "name": "name",
                "type": "string",
                "value": "name"
            }
        ]
    },
    "MONITOR": {
        "summary": "Listen for all requests received by the server in real time",
        "complexity": "PATCH__TBD__54__",
        "group": "server",
        "since": "1.0.0",
        "arity": 1,
        "function": "monitorCommand",
        "history": [
            [
                "6.0",
                "`AUTH` excluded from the command's output."
            ],
            [
                "6.2",
                "`RESET` can be called to exit monitor mode."
            ],
            [
                "6.2.4",
                "`AUTH`, `HELLO`, `EVAL`, `EVAL_RO`, `EVALSHA` and `EVALSHA_RO` included in the command's output."
            ]
        ],
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ]
    },
    "MOVE": {
        "summary": "Move a key to another database",
        "complexity": "O(1)",
        "group": "generic",
        "since": "1.0.0",
        "arity": 3,
        "function": "moveCommand",
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "db",
                "type": "integer",
                "value": "db"
            }
        ]
    },
    "MSET": {
        "summary": "Set multiple keys to multiple values",
        "complexity": "O(N) where N is the number of keys to set.",
        "group": "string",
        "since": "1.0.1",
        "arity": -3,
        "function": "msetCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 2,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key_value",
                "type": "block",
                "value": [
                    {
                        "name": "key",
                        "type": "key",
                        "value": "key",
                        "key_spec_index": 0
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "value": "value"
                    }
                ],
                "multiple": true
            }
        ]
    },
    "MSETNX": {
        "summary": "Set multiple keys to multiple values, only if none of the keys exist",
        "complexity": "O(N) where N is the number of keys to set.",
        "group": "string",
        "since": "1.0.1",
        "arity": -3,
        "function": "msetnxCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 2,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key_value",
                "type": "block",
                "value": [
                    {
                        "name": "key",
                        "type": "key",
                        "value": "key",
                        "key_spec_index": 0
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "value": "value"
                    }
                ],
                "multiple": true
            }
        ]
    },
    "MULTI": {
        "summary": "Mark the start of a transaction block",
        "complexity": "PATCH__TBD__36__",
        "group": "transactions",
        "since": "1.2.0",
        "arity": 1,
        "function": "multiCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale",
            "fast"
        ],
        "acl_categories": [
            "transaction"
        ]
    },
    "OBJECT ENCODING": {
        "summary": "Inspect the internal encoding of a Redis object",
        "complexity": "O(1)",
        "group": "generic",
        "since": "2.2.3",
        "arity": 3,
        "container": "OBJECT",
        "function": "objectCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "OBJECT HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "generic",
        "since": "6.2.0",
        "arity": 2,
        "container": "OBJECT",
        "function": "objectCommand",
        "command_flags": [
            "loading",
            "stale"
        ],
        "acl_categories": [
            "keyspace"
        ]
    },
    "OBJECT FREQ": {
        "summary": "Get the logarithmic access frequency counter of a Redis object",
        "complexity": "O(1)",
        "group": "generic",
        "since": "4.0.0",
        "arity": 3,
        "container": "OBJECT",
        "function": "objectCommand",
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "OBJECT IDLETIME": {
        "summary": "Get the time since a Redis object was last accessed",
        "complexity": "O(1)",
        "group": "generic",
        "since": "2.2.3",
        "arity": 3,
        "container": "OBJECT",
        "function": "objectCommand",
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "OBJECT REFCOUNT": {
        "summary": "Get the number of references to the value of the key",
        "complexity": "O(1)",
        "group": "generic",
        "since": "2.2.3",
        "arity": 3,
        "container": "OBJECT",
        "function": "objectCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "OBJECT": {
        "summary": "A container for object introspection commands",
        "complexity": "Depends on subcommand.",
        "group": "generic",
        "since": "2.2.3",
        "arity": -2
    },
    "PERSIST": {
        "summary": "Remove the expiration from a key",
        "complexity": "O(1)",
        "group": "generic",
        "since": "2.2.0",
        "arity": 2,
        "function": "persistCommand",
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "PEXPIRE": {
        "summary": "Set a key's time to live in milliseconds",
        "complexity": "O(1)",
        "group": "generic",
        "since": "2.6.0",
        "arity": -3,
        "function": "pexpireCommand",
        "history": [
            [
                "7.0",
                "Added options: `NX`, `XX`, `GT` and `LT`."
            ]
        ],
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "milliseconds",
                "type": "integer",
                "value": "milliseconds"
            },
            {
                "name": "condition",
                "type": "oneof",
                "value": [
                    {
                        "name": "nx",
                        "type": "pure-token",
                        "token": "NX"
                    },
                    {
                        "name": "xx",
                        "type": "pure-token",
                        "token": "XX"
                    },
                    {
                        "name": "gt",
                        "type": "pure-token",
                        "token": "GT"
                    },
                    {
                        "name": "lt",
                        "type": "pure-token",
                        "token": "LT"
                    }
                ],
                "optional": true
            }
        ]
    },
    "PEXPIREAT": {
        "summary": "Set the expiration for a key as a UNIX timestamp specified in milliseconds",
        "complexity": "O(1)",
        "group": "generic",
        "since": "2.6.0",
        "arity": -3,
        "function": "pexpireatCommand",
        "history": [
            [
                "7.0",
                "Added options: `NX`, `XX`, `GT` and `LT`."
            ]
        ],
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "milliseconds-timestamp",
                "type": "unix-time",
                "value": "milliseconds-timestamp"
            },
            {
                "name": "condition",
                "type": "oneof",
                "value": [
                    {
                        "name": "nx",
                        "type": "pure-token",
                        "token": "NX"
                    },
                    {
                        "name": "xx",
                        "type": "pure-token",
                        "token": "XX"
                    },
                    {
                        "name": "gt",
                        "type": "pure-token",
                        "token": "GT"
                    },
                    {
                        "name": "lt",
                        "type": "pure-token",
                        "token": "LT"
                    }
                ],
                "optional": true
            }
        ]
    },
    "PEXPIRETIME": {
        "summary": "Get the expiration Unix timestamp for a key in milliseconds",
        "complexity": "O(1)",
        "group": "generic",
        "since": "7.0.0",
        "arity": 2,
        "function": "pexpiretimeCommand",
        "command_flags": [
            "readonly",
            "random",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "PFADD": {
        "summary": "Adds the specified elements to the specified HyperLogLog.",
        "complexity": "O(1) to add every element.",
        "group": "hyperloglog",
        "since": "2.8.9",
        "arity": -2,
        "function": "pfaddCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "hyperloglog"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "element",
                "type": "string",
                "value": "element",
                "optional": true,
                "multiple": true
            }
        ]
    },
    "PFCOUNT": {
        "summary": "Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",
        "complexity": "O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.",
        "group": "hyperloglog",
        "since": "2.8.9",
        "arity": -2,
        "function": "pfcountCommand",
        "command_flags": [
            "readonly",
            "may_replicate"
        ],
        "acl_categories": [
            "hyperloglog"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            }
        ]
    },
    "PFMERGE": {
        "summary": "Merge N different HyperLogLogs into a single one.",
        "complexity": "O(N) to merge N HyperLogLogs, but with high constant times.",
        "group": "hyperloglog",
        "since": "2.8.9",
        "arity": -2,
        "function": "pfmergeCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "hyperloglog"
        ],
        "key_specs": [
            {
                "flags": [
                    "write",
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "destkey",
                "type": "key",
                "value": "destkey",
                "key_spec_index": 0
            },
            {
                "name": "sourcekey",
                "type": "key",
                "value": "sourcekey",
                "key_spec_index": 1,
                "multiple": true
            }
        ]
    },
    "PFDEBUG": {
        "summary": "Internal commands for debugging HyperLogLog values",
        "complexity": "N/A",
        "group": "hyperloglog",
        "since": "2.8.9",
        "arity": -3,
        "function": "pfdebugCommand",
        "doc_flags": [
            "syscmd"
        ],
        "command_flags": [
            "write",
            "denyoom",
            "admin"
        ],
        "acl_categories": [
            "hyperloglog"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ]
    },
    "PFSELFTEST": {
        "summary": "An internal command for testing HyperLogLog values",
        "complexity": "N/A",
        "group": "hyperloglog",
        "since": "2.8.9",
        "arity": 1,
        "function": "pfselftestCommand",
        "doc_flags": [
            "syscmd"
        ],
        "command_flags": [
            "admin"
        ],
        "acl_categories": [
            "hyperloglog"
        ]
    },
    "PING": {
        "summary": "Ping the server",
        "complexity": "PATCH__TBD__67__",
        "group": "connection",
        "since": "1.0.0",
        "arity": -1,
        "function": "pingCommand",
        "command_flags": [
            "fast",
            "sentinel"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "message",
                "type": "string",
                "value": "message",
                "optional": true
            }
        ]
    },
    "PSETEX": {
        "summary": "Set the value and expiration in milliseconds of a key",
        "complexity": "O(1)",
        "group": "string",
        "since": "2.6.0",
        "arity": 4,
        "function": "psetexCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "milliseconds",
                "type": "integer",
                "value": "milliseconds"
            },
            {
                "name": "value",
                "type": "string",
                "value": "value"
            }
        ]
    },
    "PSUBSCRIBE": {
        "summary": "Listen for messages published to channels matching the given patterns",
        "complexity": "O(N) where N is the number of patterns the client is already subscribed to.",
        "group": "pubsub",
        "since": "2.0.0",
        "arity": -2,
        "function": "psubscribeCommand",
        "command_flags": [
            "pubsub",
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ],
        "arguments": [
            {
                "name": "pattern",
                "type": "block",
                "value": [
                    {
                        "name": "pattern",
                        "type": "pattern",
                        "value": "pattern"
                    }
                ],
                "multiple": true
            }
        ]
    },
    "PSYNC": {
        "summary": "Internal command used for replication",
        "complexity": "PATCH__TBD__58__",
        "group": "server",
        "since": "2.8.0",
        "arity": -3,
        "function": "syncCommand",
        "command_flags": [
            "admin",
            "noscript"
        ],
        "arguments": [
            {
                "name": "replicationid",
                "type": "integer",
                "value": "replicationid"
            },
            {
                "name": "offset",
                "type": "integer",
                "value": "offset"
            }
        ]
    },
    "PTTL": {
        "summary": "Get the time to live for a key in milliseconds",
        "complexity": "O(1)",
        "group": "generic",
        "since": "2.6.0",
        "arity": 2,
        "function": "pttlCommand",
        "command_flags": [
            "readonly",
            "random",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "PUBLISH": {
        "summary": "Post a message to a channel",
        "complexity": "O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).",
        "group": "pubsub",
        "since": "2.0.0",
        "arity": 3,
        "function": "publishCommand",
        "command_flags": [
            "pubsub",
            "loading",
            "stale",
            "fast",
            "may_replicate",
            "sentinel"
        ],
        "arguments": [
            {
                "name": "channel",
                "type": "string",
                "value": "channel"
            },
            {
                "name": "message",
                "type": "string",
                "value": "message"
            }
        ]
    },
    "PUBSUB CHANNELS": {
        "summary": "List active channels",
        "complexity": "O(N) where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns)",
        "group": "pubsub",
        "since": "2.8.0",
        "arity": -2,
        "container": "PUBSUB",
        "function": "pubsubCommand",
        "command_flags": [
            "pubsub",
            "loading",
            "stale"
        ],
        "arguments": [
            {
                "name": "pattern",
                "type": "string",
                "value": "pattern",
                "optional": true
            }
        ]
    },
    "PUBSUB HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "pubsub",
        "since": "6.2.0",
        "arity": 2,
        "container": "PUBSUB",
        "function": "pubsubCommand",
        "command_flags": [
            "loading",
            "stale"
        ]
    },
    "PUBSUB NUMPAT": {
        "summary": "Get the count of unique patterns pattern subscriptions",
        "complexity": "O(1)",
        "group": "pubsub",
        "since": "2.8.0",
        "arity": 2,
        "container": "PUBSUB",
        "function": "pubsubCommand",
        "command_flags": [
            "pubsub",
            "loading",
            "stale"
        ]
    },
    "PUBSUB NUMSUB": {
        "summary": "Get the count of subscribers for channels",
        "complexity": "O(N) for the NUMSUB subcommand, where N is the number of requested channels",
        "group": "pubsub",
        "since": "2.8.0",
        "arity": -2,
        "container": "PUBSUB",
        "function": "pubsubCommand",
        "command_flags": [
            "pubsub",
            "loading",
            "stale"
        ],
        "arguments": [
            {
                "name": "channel",
                "type": "string",
                "value": "channel",
                "optional": true,
                "multiple": true
            }
        ]
    },
    "PUBSUB": {
        "summary": "A container for Pub/Sun commands",
        "complexity": "Depends on subcommand.",
        "group": "pubsub",
        "since": "2.8.0",
        "arity": -2
    },
    "PUNSUBSCRIBE": {
        "summary": "Stop listening for messages posted to channels matching the given patterns",
        "complexity": "O(N+M) where N is the number of patterns the client is already subscribed and M is the number of total patterns subscribed in the system (by any client).",
        "group": "pubsub",
        "since": "2.0.0",
        "arity": -1,
        "function": "punsubscribeCommand",
        "command_flags": [
            "pubsub",
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ],
        "arguments": [
            {
                "name": "pattern",
                "type": "pattern",
                "value": "pattern",
                "optional": true,
                "multiple": true
            }
        ]
    },
    "QUIT": {
        "summary": "Close the connection",
        "complexity": "O(1)",
        "group": "connection",
        "since": "1.0.0",
        "arity": -1,
        "function": "quitCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale",
            "fast",
            "no_auth"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "RANDOMKEY": {
        "summary": "Return a random key from the keyspace",
        "complexity": "O(1)",
        "group": "generic",
        "since": "1.0.0",
        "arity": 1,
        "function": "randomkeyCommand",
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "keyspace"
        ]
    },
    "READONLY": {
        "summary": "Enables read queries for a connection to a cluster replica node",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 1,
        "function": "readonlyCommand",
        "command_flags": [
            "fast"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "READWRITE": {
        "summary": "Disables read queries for a connection to a cluster replica node",
        "complexity": "O(1)",
        "group": "cluster",
        "since": "3.0.0",
        "arity": 1,
        "function": "readwriteCommand",
        "command_flags": [
            "fast"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "RENAME": {
        "summary": "Rename a key",
        "complexity": "O(1)",
        "group": "generic",
        "since": "1.0.0",
        "arity": 3,
        "function": "renameCommand",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "newkey",
                "type": "key",
                "value": "newkey",
                "key_spec_index": 1
            }
        ]
    },
    "RENAMENX": {
        "summary": "Rename a key, only if the new key does not exist",
        "complexity": "O(1)",
        "group": "generic",
        "since": "1.0.0",
        "arity": 3,
        "function": "renamenxCommand",
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "newkey",
                "type": "key",
                "value": "newkey",
                "key_spec_index": 1
            }
        ]
    },
    "REPLCONF": {
        "summary": "An internal command for configuring the replication stream",
        "complexity": "PATCH__TBD__26__",
        "group": "server",
        "since": "PATCH__TBD__28__",
        "arity": -1,
        "function": "replconfCommand",
        "doc_flags": [
            "syscmd"
        ],
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale"
        ]
    },
    "RESET": {
        "summary": "Reset the connection",
        "complexity": "PATCH__TBD__74__",
        "group": "connection",
        "since": "6.2",
        "arity": 1,
        "function": "resetCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale",
            "fast",
            "no_auth"
        ],
        "acl_categories": [
            "connection"
        ]
    },
    "RESTORE-ASKING": {
        "summary": "An internal command for migrating keys in a cluster",
        "complexity": "PATCH__TBD__17__",
        "group": "server",
        "since": "PATCH__TBD__19__",
        "arity": -4,
        "function": "restoreCommand",
        "doc_flags": [
            "syscmd"
        ],
        "command_flags": [
            "write",
            "denyoom",
            "asking"
        ],
        "acl_categories": [
            "keyspace",
            "dangerous"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ]
    },
    "REPLICAOF": {
        "summary": "Make the server a replica of another instance, or promote it as master.",
        "complexity": "PATCH__TBD__59__",
        "group": "server",
        "since": "5.0.0",
        "arity": 3,
        "function": "replicaofCommand",
        "command_flags": [
            "admin",
            "noscript",
            "stale"
        ],
        "arguments": [
            {
                "name": "host",
                "type": "string",
                "value": "host"
            },
            {
                "name": "port",
                "type": "string",
                "value": "port"
            }
        ]
    },
    "RESTORE": {
        "summary": "Create a key using the provided serialized value, previously obtained using DUMP.",
        "complexity": "O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).",
        "group": "generic",
        "since": "2.6.0",
        "arity": -4,
        "function": "restoreCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "keyspace",
            "dangerous"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "ttl",
                "type": "integer",
                "value": "ttl"
            },
            {
                "name": "serialized-value",
                "type": "string",
                "value": "serialized-value"
            },
            {
                "name": "replace",
                "token": "REPLACE",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "absttl",
                "token": "ABSTTL",
                "type": "pure-token",
                "optional": true
            },
            {
                "token": "IDLETIME",
                "name": "seconds",
                "type": "integer",
                "value": "seconds",
                "optional": true
            },
            {
                "token": "FREQ",
                "name": "frequency",
                "type": "integer",
                "value": "frequency",
                "optional": true
            }
        ]
    },
    "ROLE": {
        "summary": "Return the role of the instance in the context of replication",
        "complexity": "PATCH__TBD__53__",
        "group": "server",
        "since": "2.8.12",
        "arity": 1,
        "function": "roleCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale",
            "fast",
            "sentinel"
        ],
        "acl_categories": [
            "admin",
            "dangerous"
        ]
    },
    "RPOP": {
        "summary": "Remove and get the last elements in a list",
        "complexity": "O(N) where N is the number of elements returned",
        "group": "list",
        "since": "1.0.0",
        "arity": -2,
        "function": "rpopCommand",
        "history": [
            [
                "6.2",
                "Added the `count` argument."
            ]
        ],
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "RPOPLPUSH": {
        "summary": "Remove the last element in a list, prepend it to another list and return it",
        "complexity": "O(1)",
        "group": "list",
        "since": "1.2.0",
        "arity": 3,
        "function": "rpoplpushCommand",
        "deprecated_since": "6.2.0",
        "replaced_by": "`LMOVE` with the `RIGHT` and `LEFT` arguments",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "write",
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "source",
                "type": "key",
                "value": "source",
                "key_spec_index": 0
            },
            {
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 1
            }
        ]
    },
    "RPUSH": {
        "summary": "Append one or multiple elements to a list",
        "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
        "group": "list",
        "since": "1.0.0",
        "arity": -3,
        "function": "rpushCommand",
        "history": [
            [
                "2.4",
                "Accepts multiple `element` arguments."
            ]
        ],
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "element",
                "type": "string",
                "value": "element",
                "multiple": true
            }
        ]
    },
    "RPUSHX": {
        "summary": "Append an element to a list, only if the list exists",
        "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
        "group": "list",
        "since": "2.2.0",
        "arity": -3,
        "function": "rpushxCommand",
        "history": [
            [
                "4.0",
                "Accepts multiple `element` arguments."
            ]
        ],
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "list"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "element",
                "type": "string",
                "value": "element",
                "multiple": true
            }
        ]
    },
    "SADD": {
        "summary": "Add one or more members to a set",
        "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
        "group": "set",
        "since": "1.0.0",
        "arity": -3,
        "function": "saddCommand",
        "history": [
            [
                "2.4",
                "Accepts multiple `member` arguments."
            ]
        ],
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "member",
                "type": "string",
                "value": "member",
                "multiple": true
            }
        ]
    },
    "SAVE": {
        "summary": "Synchronously save the dataset to disk",
        "complexity": "PATCH__TBD__51__",
        "group": "server",
        "since": "1.0.0",
        "arity": 1,
        "function": "saveCommand",
        "command_flags": [
            "admin",
            "noscript"
        ]
    },
    "SCAN": {
        "summary": "Incrementally iterate the keys space",
        "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.",
        "group": "generic",
        "since": "2.8.0",
        "arity": -2,
        "function": "scanCommand",
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "arguments": [
            {
                "name": "cursor",
                "type": "integer",
                "value": "cursor"
            },
            {
                "token": "MATCH",
                "name": "pattern",
                "type": "pattern",
                "value": "pattern",
                "optional": true
            },
            {
                "token": "COUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            },
            {
                "token": "TYPE",
                "name": "type",
                "type": "string",
                "value": "type",
                "optional": true
            }
        ]
    },
    "SCARD": {
        "summary": "Get the number of members in a set",
        "complexity": "O(1)",
        "group": "set",
        "since": "1.0.0",
        "arity": 2,
        "function": "scardCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "SCRIPT DEBUG": {
        "summary": "Set the debug mode for executed scripts.",
        "complexity": "O(1)",
        "group": "scripting",
        "since": "3.2.0",
        "arity": 3,
        "container": "SCRIPT",
        "function": "scriptCommand",
        "command_flags": [
            "noscript"
        ],
        "acl_categories": [
            "scripting"
        ],
        "arguments": [
            {
                "name": "mode",
                "type": "oneof",
                "value": [
                    {
                        "name": "yes",
                        "type": "pure-token",
                        "token": "YES"
                    },
                    {
                        "name": "sync",
                        "type": "pure-token",
                        "token": "SYNC"
                    },
                    {
                        "name": "no",
                        "type": "pure-token",
                        "token": "NO"
                    }
                ]
            }
        ]
    },
    "SCRIPT EXISTS": {
        "summary": "Check existence of scripts in the script cache.",
        "complexity": "O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).",
        "group": "scripting",
        "since": "2.6.0",
        "arity": -3,
        "container": "SCRIPT",
        "function": "scriptCommand",
        "command_flags": [
            "noscript"
        ],
        "acl_categories": [
            "scripting"
        ],
        "arguments": [
            {
                "name": "sha1",
                "type": "string",
                "value": "sha1",
                "multiple": true
            }
        ]
    },
    "SCRIPT FLUSH": {
        "summary": "Remove all the scripts from the script cache.",
        "complexity": "O(N) with N being the number of scripts in cache",
        "group": "scripting",
        "since": "2.6.0",
        "arity": -2,
        "container": "SCRIPT",
        "function": "scriptCommand",
        "history": [
            [
                "6.2.0",
                "Added the `ASYNC` and `SYNC` flushing mode modifiers, as well as the  **lazyfree-lazy-user-flush** configuration directive."
            ]
        ],
        "command_flags": [
            "noscript",
            "may_replicate"
        ],
        "acl_categories": [
            "scripting"
        ],
        "arguments": [
            {
                "name": "async",
                "type": "oneof",
                "value": [
                    {
                        "name": "async",
                        "type": "pure-token",
                        "token": "ASYNC"
                    },
                    {
                        "name": "sync",
                        "type": "pure-token",
                        "token": "SYNC"
                    }
                ],
                "optional": true
            }
        ]
    },
    "SCRIPT HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "scripting",
        "since": "5.0.0",
        "arity": 2,
        "container": "SCRIPT",
        "function": "scriptCommand",
        "command_flags": [
            "loading",
            "stale"
        ],
        "acl_categories": [
            "scripting"
        ]
    },
    "SCRIPT KILL": {
        "summary": "Kill the script currently in execution.",
        "complexity": "O(1)",
        "group": "scripting",
        "since": "2.6.0",
        "arity": 2,
        "container": "SCRIPT",
        "function": "scriptCommand",
        "command_flags": [
            "noscript"
        ],
        "acl_categories": [
            "scripting"
        ]
    },
    "SCRIPT": {
        "summary": "A container for Lua scripts management commands",
        "complexity": "Depends on subcommand.",
        "group": "scripting",
        "since": "2.6.0",
        "arity": -2
    },
    "SCRIPT LOAD": {
        "summary": "Load the specified Lua script into the script cache.",
        "complexity": "O(N) with N being the length in bytes of the script body.",
        "group": "scripting",
        "since": "2.6.0",
        "arity": 3,
        "container": "SCRIPT",
        "function": "scriptCommand",
        "command_flags": [
            "noscript",
            "may_replicate"
        ],
        "acl_categories": [
            "scripting"
        ],
        "arguments": [
            {
                "name": "script",
                "type": "string",
                "value": "script"
            }
        ]
    },
    "SDIFF": {
        "summary": "Subtract multiple sets",
        "complexity": "O(N) where N is the total number of elements in all given sets.",
        "group": "set",
        "since": "1.0.0",
        "arity": -2,
        "function": "sdiffCommand",
        "command_flags": [
            "readonly",
            "sort_for_script"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            }
        ]
    },
    "SDIFFSTORE": {
        "summary": "Subtract multiple sets and store the resulting set in a key",
        "complexity": "O(N) where N is the total number of elements in all given sets.",
        "group": "set",
        "since": "1.0.0",
        "arity": -3,
        "function": "sdiffstoreCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 0
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 1,
                "multiple": true
            }
        ]
    },
    "SELECT": {
        "summary": "Change the selected database for the current connection",
        "complexity": "PATCH__TBD__48__",
        "group": "connection",
        "since": "1.0.0",
        "arity": 2,
        "function": "selectCommand",
        "command_flags": [
            "loading",
            "stale",
            "fast"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "index",
                "type": "integer",
                "value": "index"
            }
        ]
    },
    "SENTINEL CKQUORUM": {
        "summary": "Check for a Sentinel quorum",
        "complexity": "PATCH__TBD__42__",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": 3,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL CONFIG": {
        "summary": "Configure Sentinel",
        "complexity": "O(1)",
        "group": "sentinel",
        "since": "6.2.0",
        "arity": -3,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL DEBUG": {
        "summary": "PATCH__TBD__7__",
        "complexity": "PATCH__TBD__6__",
        "group": "sentinel",
        "since": "PATCH__TBD__9__",
        "arity": -2,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL FAILOVER": {
        "summary": "Force a failover",
        "complexity": "PATCH__TBD__22__",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": 3,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL FLUSHCONFIG": {
        "summary": "Rewrite configuration file",
        "complexity": "O(1)",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": 2,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL GET-MASTER-ADDR-BY-NAME": {
        "summary": "Get port and address of a master",
        "complexity": "O(1)",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": 3,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "sentinel",
        "since": "6.2.0",
        "arity": 2,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "loading",
            "stale",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL IS-MASTER-DOWN-BY-ADDR": {
        "summary": "Check if a master is down",
        "complexity": "O(1)",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": 6,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL INFO-CACHE": {
        "summary": "Get cached INFO from the instances in the deployment",
        "complexity": "O(N) where N is the number of instances",
        "group": "sentinel",
        "since": "3.2.0",
        "arity": 3,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL MASTER": {
        "summary": "Shows the state of a master",
        "complexity": "O(1)",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": 3,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL MASTERS": {
        "summary": "List the monitored masters",
        "complexity": "O(N) where N is the number of masters",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": 2,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL MONITOR": {
        "summary": "Start monitoring",
        "complexity": "O(1)",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": 6,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL MYID": {
        "summary": "Get the Sentinel instance ID",
        "complexity": "O(1)",
        "group": "sentinel",
        "since": "6.2.0",
        "arity": 2,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL PENDING-SCRIPTS": {
        "summary": "Get information about pending scripts",
        "complexity": "PATCH__TBD__54__",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": 2,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL REMOVE": {
        "summary": "Stop monitoring",
        "complexity": "O(1)",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": 3,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL REPLICAS": {
        "summary": "List the monitored replicas",
        "complexity": "O(N) where N is the number of replicas",
        "group": "sentinel",
        "since": "5.0.0",
        "arity": 3,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL RESET": {
        "summary": "Reset masters by name pattern",
        "complexity": "O(N) where N is the number of monitored masters",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": 3,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL SENTINELS": {
        "summary": "List the Sentinel instances",
        "complexity": "O(N) where N is the number of Sentinels",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": 3,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL SET": {
        "summary": "Change the configuration of a monitored master",
        "complexity": "O(1)",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": -3,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL SIMULATE-FAILURE": {
        "summary": "Simulate failover scenarios",
        "complexity": "PATCH__TBD__81__",
        "group": "sentinel",
        "since": "3.2.0",
        "arity": 3,
        "container": "SENTINEL",
        "function": "sentinelCommand",
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SENTINEL": {
        "summary": "A container for Sentinel commands",
        "complexity": "Depends on subcommand.",
        "group": "sentinel",
        "since": "2.8.4",
        "arity": -2,
        "command_flags": [
            "admin",
            "sentinel",
            "only_sentinel"
        ]
    },
    "SET": {
        "summary": "Set the string value of a key",
        "complexity": "O(1)",
        "group": "string",
        "since": "1.0.0",
        "arity": -3,
        "function": "setCommand",
        "history": [
            [
                "2.6.12",
                "Added the `EX`, `PX`, `NX` and `XX` options."
            ],
            [
                "6.0",
                "Added the `KEEPTTL` option."
            ],
            [
                "6.2",
                "Added the `GET`, `EXAT` and `PXAT` option."
            ],
            [
                "7.0",
                "Allowed the `NX` and `GET` options to be used together."
            ]
        ],
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write",
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "value",
                "type": "string",
                "value": "value"
            },
            {
                "name": "expiration",
                "type": "oneof",
                "value": [
                    {
                        "name": "ex",
                        "type": "integer",
                        "value": "seconds",
                        "token": "EX"
                    },
                    {
                        "name": "px",
                        "type": "integer",
                        "value": "milliseconds",
                        "token": "PX"
                    },
                    {
                        "name": "exat",
                        "type": "unix-time",
                        "value": "unix-time-seconds",
                        "token": "EXAT"
                    },
                    {
                        "name": "pxat",
                        "type": "unix-time",
                        "value": "unix-time-milliseconds",
                        "token": "PXAT"
                    },
                    {
                        "name": "keepttl",
                        "type": "pure-token",
                        "token": "KEEPTTL"
                    }
                ],
                "optional": true
            },
            {
                "name": "condition",
                "type": "oneof",
                "value": [
                    {
                        "name": "nx",
                        "type": "pure-token",
                        "token": "NX"
                    },
                    {
                        "name": "xx",
                        "type": "pure-token",
                        "token": "XX"
                    }
                ],
                "optional": true
            },
            {
                "name": "get",
                "token": "GET",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "SETBIT": {
        "summary": "Sets or clears the bit at offset in the string value stored at key",
        "complexity": "O(1)",
        "group": "bitmap",
        "since": "2.2.0",
        "arity": 4,
        "function": "setbitCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "bitmap"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "offset",
                "type": "integer",
                "value": "offset"
            },
            {
                "name": "value",
                "type": "integer",
                "value": "value"
            }
        ]
    },
    "SETEX": {
        "summary": "Set the value and expiration of a key",
        "complexity": "O(1)",
        "group": "string",
        "since": "2.0.0",
        "arity": 4,
        "function": "setexCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "seconds",
                "type": "integer",
                "value": "seconds"
            },
            {
                "name": "value",
                "type": "string",
                "value": "value"
            }
        ]
    },
    "SETRANGE": {
        "summary": "Overwrite part of a string at key starting at the specified offset",
        "complexity": "O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.",
        "group": "string",
        "since": "2.2.0",
        "arity": 4,
        "function": "setrangeCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "offset",
                "type": "integer",
                "value": "offset"
            },
            {
                "name": "value",
                "type": "string",
                "value": "value"
            }
        ]
    },
    "SETNX": {
        "summary": "Set the value of a key, only if the key does not exist",
        "complexity": "O(1)",
        "group": "string",
        "since": "1.0.0",
        "arity": 3,
        "function": "setnxCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "value",
                "type": "string",
                "value": "value"
            }
        ]
    },
    "SHUTDOWN": {
        "summary": "Synchronously save the dataset to disk and then shut down the server",
        "complexity": "PATCH__TBD__35__",
        "group": "server",
        "since": "1.0.0",
        "arity": -1,
        "function": "shutdownCommand",
        "command_flags": [
            "admin",
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ],
        "arguments": [
            {
                "name": "nosave_save",
                "type": "oneof",
                "value": [
                    {
                        "name": "nosave",
                        "type": "pure-token",
                        "token": "NOSAVE"
                    },
                    {
                        "name": "save",
                        "type": "pure-token",
                        "token": "SAVE"
                    }
                ],
                "optional": true
            }
        ]
    },
    "SINTER": {
        "summary": "Intersect multiple sets",
        "complexity": "O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.",
        "group": "set",
        "since": "1.0.0",
        "arity": -2,
        "function": "sinterCommand",
        "command_flags": [
            "readonly",
            "sort_for_script"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            }
        ]
    },
    "SINTERSTORE": {
        "summary": "Intersect multiple sets and store the resulting set in a key",
        "complexity": "O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.",
        "group": "set",
        "since": "1.0.0",
        "arity": -3,
        "function": "sinterstoreCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 0
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 1,
                "multiple": true
            }
        ]
    },
    "SINTERCARD": {
        "summary": "Intersect multiple sets and return the cardinality of the result",
        "complexity": "O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.",
        "group": "set",
        "since": "7.0.0",
        "arity": -3,
        "function": "sinterCardCommand",
        "get_keys_function": "sintercardGetKeys",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "token": "LIMIT",
                "name": "limit",
                "type": "integer",
                "value": "limit",
                "optional": true
            }
        ]
    },
    "SISMEMBER": {
        "summary": "Determine if a given value is a member of a set",
        "complexity": "O(1)",
        "group": "set",
        "since": "1.0.0",
        "arity": 3,
        "function": "sismemberCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "member",
                "type": "string",
                "value": "member"
            }
        ]
    },
    "SLAVEOF": {
        "summary": "Make the server a replica of another instance, or promote it as master. Deprecated starting with Redis 5. Use REPLICAOF instead.",
        "complexity": "PATCH__TBD__56__",
        "group": "server",
        "since": "1.0.0",
        "arity": 3,
        "function": "replicaofCommand",
        "command_flags": [
            "admin",
            "noscript",
            "stale"
        ],
        "arguments": [
            {
                "name": "host",
                "type": "string",
                "value": "host"
            },
            {
                "name": "port",
                "type": "string",
                "value": "port"
            }
        ]
    },
    "SLOWLOG GET": {
        "summary": "Get the slow log's entries",
        "complexity": "O(N) where N is the number of entries returned",
        "group": "server",
        "since": "2.2.12",
        "arity": -2,
        "container": "SLOWLOG",
        "function": "slowlogCommand",
        "history": [
            [
                "4.0",
                "Added client IP address, port and name to the reply."
            ]
        ],
        "command_flags": [
            "admin",
            "random",
            "loading",
            "stale"
        ],
        "arguments": [
            {
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "SLOWLOG HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "server",
        "since": "6.2.0",
        "arity": 2,
        "container": "SLOWLOG",
        "function": "slowlogCommand",
        "command_flags": [
            "loading",
            "stale"
        ]
    },
    "SLOWLOG RESET": {
        "summary": "Clear all entries from the slow log",
        "complexity": "O(N) where N is the number of entries in the slowlog",
        "group": "server",
        "since": "2.2.12",
        "arity": 2,
        "container": "SLOWLOG",
        "function": "slowlogCommand",
        "command_flags": [
            "admin",
            "loading",
            "stale"
        ]
    },
    "SLOWLOG LEN": {
        "summary": "Get the slow log's length",
        "complexity": "O(1)",
        "group": "server",
        "since": "2.2.12",
        "arity": 2,
        "container": "SLOWLOG",
        "function": "slowlogCommand",
        "command_flags": [
            "admin",
            "random",
            "loading",
            "stale"
        ]
    },
    "SLOWLOG": {
        "summary": "A container for slow log commands",
        "complexity": "Depends on subcommand.",
        "group": "server",
        "since": "2.2.12",
        "arity": -2
    },
    "SMEMBERS": {
        "summary": "Get all the members in a set",
        "complexity": "O(N) where N is the set cardinality.",
        "group": "set",
        "since": "1.0.0",
        "arity": 2,
        "function": "sinterCommand",
        "command_flags": [
            "readonly",
            "sort_for_script"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "SMOVE": {
        "summary": "Move a member from one set to another",
        "complexity": "O(1)",
        "group": "set",
        "since": "1.0.0",
        "arity": 4,
        "function": "smoveCommand",
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "write",
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "source",
                "type": "key",
                "value": "source",
                "key_spec_index": 0
            },
            {
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 1
            },
            {
                "name": "member",
                "type": "string",
                "value": "member"
            }
        ]
    },
    "SMISMEMBER": {
        "summary": "Returns the membership associated with the given elements for a set",
        "complexity": "O(N) where N is the number of elements being checked for membership",
        "group": "set",
        "since": "6.2.0",
        "arity": -3,
        "function": "smismemberCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "member",
                "type": "string",
                "value": "member",
                "multiple": true
            }
        ]
    },
    "SORT": {
        "summary": "Sort the elements in a list, set or sorted set",
        "complexity": "O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).",
        "group": "generic",
        "since": "1.0.0",
        "arity": -2,
        "function": "sortCommand",
        "get_keys_function": "sortGetKeys",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "set",
            "sortedset",
            "list",
            "dangerous"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "write",
                    "incomplete"
                ],
                "begin_search": {
                    "unknown": null
                },
                "find_keys": {
                    "unknown": null
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "token": "BY",
                "name": "pattern",
                "type": "pattern",
                "value": "pattern",
                "optional": true
            },
            {
                "token": "LIMIT",
                "name": "offset_count",
                "type": "block",
                "value": [
                    {
                        "name": "offset",
                        "type": "integer",
                        "value": "offset"
                    },
                    {
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    }
                ],
                "optional": true
            },
            {
                "token": "GET",
                "name": "pattern",
                "type": "string",
                "value": "pattern",
                "optional": true,
                "multiple": true,
                "multiple_token": true
            },
            {
                "name": "order",
                "type": "oneof",
                "value": [
                    {
                        "name": "asc",
                        "type": "pure-token",
                        "token": "ASC"
                    },
                    {
                        "name": "desc",
                        "type": "pure-token",
                        "token": "DESC"
                    }
                ],
                "optional": true
            },
            {
                "name": "sorting",
                "token": "ALPHA",
                "type": "pure-token",
                "optional": true
            },
            {
                "token": "STORE",
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 1,
                "optional": true
            }
        ]
    },
    "SORT_RO": {
        "summary": "Sort the elements in a list, set or sorted set. Read-only variant of SORT.",
        "complexity": "O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).",
        "group": "generic",
        "since": "7.0.0",
        "arity": -2,
        "function": "sortroCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "set",
            "sortedset",
            "list",
            "dangerous"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "token": "BY",
                "name": "pattern",
                "type": "pattern",
                "value": "pattern",
                "optional": true
            },
            {
                "token": "LIMIT",
                "name": "offset_count",
                "type": "block",
                "value": [
                    {
                        "name": "offset",
                        "type": "integer",
                        "value": "offset"
                    },
                    {
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    }
                ],
                "optional": true
            },
            {
                "token": "GET",
                "name": "pattern",
                "type": "string",
                "value": "pattern",
                "optional": true,
                "multiple": true,
                "multiple_token": true
            },
            {
                "name": "order",
                "type": "oneof",
                "value": [
                    {
                        "name": "asc",
                        "type": "pure-token",
                        "token": "ASC"
                    },
                    {
                        "name": "desc",
                        "type": "pure-token",
                        "token": "DESC"
                    }
                ],
                "optional": true
            },
            {
                "name": "sorting",
                "token": "ALPHA",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "SPOP": {
        "summary": "Remove and return one or multiple random members from a set",
        "complexity": "Without the count argument O(1), otherwise O(N) where N is the value of the passed count.",
        "group": "set",
        "since": "1.0.0",
        "arity": -2,
        "function": "spopCommand",
        "history": [
            [
                "3.2",
                "Added the `count` argument."
            ]
        ],
        "command_flags": [
            "write",
            "random",
            "fast"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "SREM": {
        "summary": "Remove one or more members from a set",
        "complexity": "O(N) where N is the number of members to be removed.",
        "group": "set",
        "since": "1.0.0",
        "arity": -3,
        "function": "sremCommand",
        "history": [
            [
                "2.4",
                "Accepts multiple `member` arguments."
            ]
        ],
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "member",
                "type": "string",
                "value": "member",
                "multiple": true
            }
        ]
    },
    "SRANDMEMBER": {
        "summary": "Get one or multiple random members from a set",
        "complexity": "Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.",
        "group": "set",
        "since": "1.0.0",
        "arity": -2,
        "function": "srandmemberCommand",
        "history": [
            [
                "2.6.0",
                "Added the optional `count` argument."
            ]
        ],
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "SSCAN": {
        "summary": "Incrementally iterate Set elements",
        "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..",
        "group": "set",
        "since": "2.8.0",
        "arity": -3,
        "function": "sscanCommand",
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "cursor",
                "type": "integer",
                "value": "cursor"
            },
            {
                "token": "MATCH",
                "name": "pattern",
                "type": "pattern",
                "value": "pattern",
                "optional": true
            },
            {
                "token": "COUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "STRLEN": {
        "summary": "Get the length of the value stored in a key",
        "complexity": "O(1)",
        "group": "string",
        "since": "2.2.0",
        "arity": 2,
        "function": "strlenCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "SUBSTR": {
        "summary": "Get a substring of the string stored at a key",
        "complexity": "O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.",
        "group": "string",
        "since": "1.0.0",
        "arity": 4,
        "function": "getrangeCommand",
        "deprecated_since": "2.0.0",
        "replaced_by": "`GETRANGE`",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "string"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ]
    },
    "SUBSCRIBE": {
        "summary": "Listen for messages published to the given channels",
        "complexity": "O(N) where N is the number of channels to subscribe to.",
        "group": "pubsub",
        "since": "2.0.0",
        "arity": -2,
        "function": "subscribeCommand",
        "history": [
            [
                "6.2",
                "`RESET` can be called to exit subscribed state."
            ]
        ],
        "command_flags": [
            "pubsub",
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ],
        "arguments": [
            {
                "name": "channel",
                "type": "string",
                "value": "channel",
                "multiple": true
            }
        ]
    },
    "SUNION": {
        "summary": "Add multiple sets",
        "complexity": "O(N) where N is the total number of elements in all given sets.",
        "group": "set",
        "since": "1.0.0",
        "arity": -2,
        "function": "sunionCommand",
        "command_flags": [
            "readonly",
            "sort_for_script"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            }
        ]
    },
    "SUNIONSTORE": {
        "summary": "Add multiple sets and store the resulting set in a key",
        "complexity": "O(N) where N is the total number of elements in all given sets.",
        "group": "set",
        "since": "1.0.0",
        "arity": -3,
        "function": "sunionstoreCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "set"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 0
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 1,
                "multiple": true
            }
        ]
    },
    "SWAPDB": {
        "summary": "Swaps two Redis databases",
        "complexity": "O(N) where N is the count of clients watching or blocking on keys from both databases.",
        "group": "server",
        "since": "4.0.0",
        "arity": 3,
        "function": "swapdbCommand",
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "keyspace",
            "dangerous"
        ],
        "arguments": [
            {
                "name": "index1",
                "type": "integer",
                "value": "index1"
            },
            {
                "name": "index2",
                "type": "integer",
                "value": "index2"
            }
        ]
    },
    "SYNC": {
        "summary": "Internal command used for replication",
        "complexity": "PATCH__TBD__50__",
        "group": "server",
        "since": "1.0.0",
        "arity": 1,
        "function": "syncCommand",
        "command_flags": [
            "admin",
            "noscript"
        ]
    },
    "TIME": {
        "summary": "Return the current server time",
        "complexity": "O(1)",
        "group": "server",
        "since": "2.6.0",
        "arity": 1,
        "function": "timeCommand",
        "command_flags": [
            "random",
            "loading",
            "stale",
            "fast"
        ]
    },
    "TOUCH": {
        "summary": "Alters the last access time of a key(s). Returns the number of existing keys specified.",
        "complexity": "O(N) where N is the number of keys that will be touched.",
        "group": "generic",
        "since": "3.2.1",
        "arity": -2,
        "function": "touchCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            }
        ]
    },
    "TTL": {
        "summary": "Get the time to live for a key in seconds",
        "complexity": "O(1)",
        "group": "generic",
        "since": "1.0.0",
        "arity": 2,
        "function": "ttlCommand",
        "command_flags": [
            "readonly",
            "random",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "TYPE": {
        "summary": "Determine the type stored at key",
        "complexity": "O(1)",
        "group": "generic",
        "since": "1.0.0",
        "arity": 2,
        "function": "typeCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "UNLINK": {
        "summary": "Delete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking.",
        "complexity": "O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.",
        "group": "generic",
        "since": "4.0.0",
        "arity": -2,
        "function": "unlinkCommand",
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "keyspace"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            }
        ]
    },
    "UNSUBSCRIBE": {
        "summary": "Stop listening for messages posted to the given channels",
        "complexity": "O(N) where N is the number of clients already subscribed to a channel.",
        "group": "pubsub",
        "since": "2.0.0",
        "arity": -1,
        "function": "unsubscribeCommand",
        "command_flags": [
            "pubsub",
            "noscript",
            "loading",
            "stale",
            "sentinel"
        ],
        "arguments": [
            {
                "name": "channel",
                "type": "string",
                "value": "channel",
                "optional": true,
                "multiple": true
            }
        ]
    },
    "UNWATCH": {
        "summary": "Forget about all watched keys",
        "complexity": "O(1)",
        "group": "transactions",
        "since": "2.2.0",
        "arity": 1,
        "function": "unwatchCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale",
            "fast"
        ],
        "acl_categories": [
            "transaction"
        ]
    },
    "WATCH": {
        "summary": "Watch the given keys to determine execution of the MULTI/EXEC block",
        "complexity": "O(1) for every key.",
        "group": "transactions",
        "since": "2.2.0",
        "arity": -2,
        "function": "watchCommand",
        "command_flags": [
            "noscript",
            "loading",
            "stale",
            "fast"
        ],
        "acl_categories": [
            "transaction"
        ],
        "key_specs": [
            {
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            }
        ]
    },
    "WAIT": {
        "summary": "Wait for the synchronous replication of all the write commands sent in the context of the current connection",
        "complexity": "O(1)",
        "group": "generic",
        "since": "3.0.0",
        "arity": 3,
        "function": "waitCommand",
        "command_flags": [
            "noscript"
        ],
        "acl_categories": [
            "connection"
        ],
        "arguments": [
            {
                "name": "numreplicas",
                "type": "integer",
                "value": "numreplicas"
            },
            {
                "name": "timeout",
                "type": "integer",
                "value": "timeout"
            }
        ]
    },
    "XACK": {
        "summary": "Marks a pending message as correctly processed, effectively removing it from the pending entries list of the consumer group. Return value of the command is the number of messages successfully acknowledged, that is, the IDs we were actually able to resolve in the PEL.",
        "complexity": "O(1) for each message ID processed.",
        "group": "stream",
        "since": "5.0.0",
        "arity": -4,
        "function": "xackCommand",
        "command_flags": [
            "write",
            "random",
            "fast"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "group",
                "type": "string",
                "value": "group"
            },
            {
                "name": "ID",
                "type": "string",
                "value": "ID",
                "multiple": true
            }
        ]
    },
    "XADD": {
        "summary": "Appends a new entry to a stream",
        "complexity": "O(1) when adding a new entry, O(N) when trimming where N being the number of entries evicted.",
        "group": "stream",
        "since": "5.0.0",
        "arity": -5,
        "function": "xaddCommand",
        "history": [
            [
                "6.2",
                "Added the `NOMKSTREAM` option, `MINID` trimming strategy and the `LIMIT` option."
            ]
        ],
        "command_flags": [
            "write",
            "denyoom",
            "random",
            "fast"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "token": "NOMKSTREAM",
                "name": "nomkstream",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "trim",
                "type": "block",
                "value": [
                    {
                        "name": "strategy",
                        "type": "oneof",
                        "value": [
                            {
                                "name": "maxlen",
                                "type": "pure-token",
                                "token": "MAXLEN"
                            },
                            {
                                "name": "minid",
                                "type": "pure-token",
                                "token": "MINID"
                            }
                        ]
                    },
                    {
                        "name": "operator",
                        "type": "oneof",
                        "value": [
                            {
                                "name": "equal",
                                "type": "pure-token",
                                "token": "="
                            },
                            {
                                "name": "approximately",
                                "type": "pure-token",
                                "token": "~"
                            }
                        ],
                        "optional": true
                    },
                    {
                        "name": "threshold",
                        "type": "string",
                        "value": "threshold"
                    },
                    {
                        "token": "LIMIT",
                        "name": "count",
                        "type": "integer",
                        "value": "count",
                        "optional": true
                    }
                ],
                "optional": true
            },
            {
                "name": "__TBD__1__",
                "type": "oneof",
                "value": [
                    {
                        "name": "auto_id",
                        "type": "pure-token",
                        "token": "*"
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "value": "ID"
                    }
                ]
            },
            {
                "name": "field_value",
                "type": "block",
                "value": [
                    {
                        "name": "field",
                        "type": "string",
                        "value": "field"
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "value": "value"
                    }
                ],
                "multiple": true
            }
        ]
    },
    "XAUTOCLAIM": {
        "summary": "Changes (or acquires) ownership of messages in a consumer group, as if the messages were delivered to the specified consumer.",
        "complexity": "O(1) if COUNT is small.",
        "group": "stream",
        "since": "6.2.0",
        "arity": -6,
        "function": "xautoclaimCommand",
        "command_flags": [
            "write",
            "random",
            "fast"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "group",
                "type": "string",
                "value": "group"
            },
            {
                "name": "consumer",
                "type": "string",
                "value": "consumer"
            },
            {
                "name": "min-idle-time",
                "type": "string",
                "value": "min-idle-time"
            },
            {
                "name": "start",
                "type": "string",
                "value": "start"
            },
            {
                "token": "COUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            },
            {
                "name": "justid",
                "token": "JUSTID",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "XCLAIM": {
        "summary": "Changes (or acquires) ownership of a message in a consumer group, as if the message was delivered to the specified consumer.",
        "complexity": "O(log N) with N being the number of messages in the PEL of the consumer group.",
        "group": "stream",
        "since": "5.0.0",
        "arity": -6,
        "function": "xclaimCommand",
        "command_flags": [
            "write",
            "random",
            "fast"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "group",
                "type": "string",
                "value": "group"
            },
            {
                "name": "consumer",
                "type": "string",
                "value": "consumer"
            },
            {
                "name": "min-idle-time",
                "type": "string",
                "value": "min-idle-time"
            },
            {
                "name": "ID",
                "type": "string",
                "value": "ID",
                "multiple": true
            },
            {
                "token": "IDLE",
                "name": "ms",
                "type": "integer",
                "value": "ms",
                "optional": true
            },
            {
                "token": "TIME",
                "name": "ms-unix-time",
                "type": "integer",
                "value": "ms-unix-time",
                "optional": true
            },
            {
                "token": "RETRYCOUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            },
            {
                "name": "force",
                "token": "FORCE",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "justid",
                "token": "JUSTID",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "XDEL": {
        "summary": "Removes the specified entries from the stream. Returns the number of items actually deleted, that may be different from the number of IDs passed in case certain IDs do not exist.",
        "complexity": "O(1) for each single item to delete in the stream, regardless of the stream size.",
        "group": "stream",
        "since": "5.0.0",
        "arity": -3,
        "function": "xdelCommand",
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "ID",
                "type": "string",
                "value": "ID",
                "multiple": true
            }
        ]
    },
    "XGROUP CREATE": {
        "summary": "Create a consumer group.",
        "complexity": "O(1)",
        "group": "stream",
        "since": "5.0.0",
        "arity": -5,
        "container": "XGROUP",
        "function": "xgroupCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "groupname",
                "type": "string",
                "value": "groupname"
            },
            {
                "name": "id",
                "type": "oneof",
                "value": [
                    {
                        "name": "id",
                        "type": "pure-token",
                        "token": "id"
                    },
                    {
                        "name": "new_id",
                        "type": "pure-token",
                        "token": "$"
                    }
                ]
            },
            {
                "token": "MKSTREAM",
                "name": "mkstream",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "XGROUP CREATECONSUMER": {
        "summary": "Create a consumer in a consumer group.",
        "complexity": "O(1)",
        "group": "stream",
        "since": "6.2.0",
        "arity": 5,
        "container": "XGROUP",
        "function": "xgroupCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "groupname",
                "type": "string",
                "value": "groupname"
            },
            {
                "name": "consumername",
                "type": "string",
                "value": "consumername"
            }
        ]
    },
    "XGROUP DELCONSUMER": {
        "summary": "Delete a consumer from a consumer group.",
        "complexity": "O(1)",
        "group": "stream",
        "since": "5.0.0",
        "arity": 5,
        "container": "XGROUP",
        "function": "xgroupCommand",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "groupname",
                "type": "string",
                "value": "groupname"
            },
            {
                "name": "consumername",
                "type": "string",
                "value": "consumername"
            }
        ]
    },
    "XGROUP DESTROY": {
        "summary": "Destroy a consumer group.",
        "complexity": "O(N) where N is the number of entries in the group's pending entries list (PEL).",
        "group": "stream",
        "since": "5.0.0",
        "arity": 4,
        "container": "XGROUP",
        "function": "xgroupCommand",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "groupname",
                "type": "string",
                "value": "groupname"
            }
        ]
    },
    "XGROUP HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "stream",
        "since": "5.0.0",
        "arity": 2,
        "container": "XGROUP",
        "function": "xgroupCommand",
        "command_flags": [
            "loading",
            "stale"
        ],
        "acl_categories": [
            "stream"
        ]
    },
    "XGROUP SETID": {
        "summary": "Set a consumer group to an arbitrary last delivered ID value.",
        "complexity": "O(1)",
        "group": "stream",
        "since": "5.0.0",
        "arity": 5,
        "container": "XGROUP",
        "function": "xgroupCommand",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "groupname",
                "type": "string",
                "value": "groupname"
            },
            {
                "name": "id",
                "type": "oneof",
                "value": [
                    {
                        "name": "id",
                        "type": "pure-token",
                        "token": "id"
                    },
                    {
                        "name": "new_id",
                        "type": "pure-token",
                        "token": "$"
                    }
                ]
            }
        ]
    },
    "XGROUP": {
        "summary": "A container for consumer groups commands",
        "complexity": "Depends on subcommand.",
        "group": "stream",
        "since": "5.0.0",
        "arity": -2
    },
    "XINFO CONSUMERS": {
        "summary": "List the consumers in a consumer group",
        "complexity": "O(1)",
        "group": "stream",
        "since": "5.0.0",
        "arity": 4,
        "container": "XINFO",
        "function": "xinfoCommand",
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "groupname",
                "type": "string",
                "value": "groupname"
            }
        ]
    },
    "XINFO GROUPS": {
        "summary": "List the consumer groups of a stream",
        "complexity": "O(1)",
        "group": "stream",
        "since": "5.0.0",
        "arity": 3,
        "container": "XINFO",
        "function": "xinfoCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "XINFO HELP": {
        "summary": "Show helpful text about the different subcommands",
        "complexity": "O(1)",
        "group": "stream",
        "since": "5.0.0",
        "arity": 2,
        "container": "XINFO",
        "function": "xinfoCommand",
        "command_flags": [
            "loading",
            "stale"
        ],
        "acl_categories": [
            "stream"
        ]
    },
    "XINFO STREAM": {
        "summary": "Get information about a stream",
        "complexity": "O(1)",
        "group": "stream",
        "since": "5.0.0",
        "arity": -3,
        "container": "XINFO",
        "function": "xinfoCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "full",
                "type": "block",
                "value": [
                    {
                        "token": "FULL",
                        "name": "full",
                        "type": "pure-token"
                    },
                    {
                        "token": "COUNT",
                        "name": "count",
                        "type": "integer",
                        "value": "count",
                        "optional": true
                    }
                ],
                "optional": true
            }
        ]
    },
    "XINFO": {
        "summary": "A container for stream introspection commands",
        "complexity": "Depends on subcommand.",
        "group": "stream",
        "since": "5.0.0",
        "arity": -2
    },
    "XLEN": {
        "summary": "Return the number of entries in a stream",
        "complexity": "O(1)",
        "group": "stream",
        "since": "5.0.0",
        "arity": 2,
        "function": "xlenCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "XPENDING": {
        "summary": "Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged.",
        "complexity": "O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). O(M), where M is the total number of entries scanned when used with the IDLE filter. When the command returns just the summary and the list of consumers is small, it runs in O(1) time; otherwise, an additional O(N) time for iterating every consumer.",
        "group": "stream",
        "since": "5.0.0",
        "arity": -3,
        "function": "xpendingCommand",
        "history": [
            [
                "6.2.0",
                "Added the `IDLE` option and exclusive range intervals."
            ]
        ],
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "group",
                "type": "string",
                "value": "group"
            },
            {
                "name": "filters",
                "type": "block",
                "value": [
                    {
                        "token": "IDLE",
                        "name": "min-idle-time",
                        "type": "integer",
                        "value": "min-idle-time",
                        "optional": true
                    },
                    {
                        "name": "start",
                        "type": "string",
                        "value": "start"
                    },
                    {
                        "name": "end",
                        "type": "string",
                        "value": "end"
                    },
                    {
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    },
                    {
                        "name": "consumer",
                        "type": "string",
                        "value": "consumer",
                        "optional": true
                    }
                ],
                "optional": true
            }
        ]
    },
    "XRANGE": {
        "summary": "Return a range of elements in a stream, with IDs matching the specified IDs interval",
        "complexity": "O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).",
        "group": "stream",
        "since": "5.0.0",
        "arity": -4,
        "function": "xrangeCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "start",
                "type": "string",
                "value": "start"
            },
            {
                "name": "end",
                "type": "string",
                "value": "end"
            },
            {
                "token": "COUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "XREAD": {
        "summary": "Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block.",
        "complexity": "For each stream mentioned: O(N) with N being the number of elements being returned, it means that XREAD-ing with a fixed COUNT is O(1). Note that when the BLOCK option is used, XADD will pay O(M) time in order to serve the M clients blocked on the stream getting new data.",
        "group": "stream",
        "since": "5.0.0",
        "arity": -4,
        "function": "xreadCommand",
        "get_keys_function": "xreadGetKeys",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "stream",
            "blocking"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "keyword": {
                        "keyword": "STREAMS",
                        "startfrom": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 2
                    }
                }
            }
        ],
        "arguments": [
            {
                "token": "COUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            },
            {
                "token": "BLOCK",
                "name": "milliseconds",
                "type": "integer",
                "value": "milliseconds",
                "optional": true
            },
            {
                "name": "streams",
                "token": "STREAMS",
                "type": "pure-token"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "name": "ID",
                "type": "string",
                "value": "ID",
                "multiple": true
            }
        ]
    },
    "XREADGROUP": {
        "summary": "Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block.",
        "complexity": "For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.",
        "group": "stream",
        "since": "5.0.0",
        "arity": -7,
        "function": "xreadCommand",
        "get_keys_function": "xreadGetKeys",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "stream",
            "blocking"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "keyword": {
                        "keyword": "STREAMS",
                        "startfrom": 4
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": -1,
                        "step": 1,
                        "limit": 2
                    }
                }
            }
        ],
        "arguments": [
            {
                "token": "GROUP",
                "name": "group_consumer",
                "type": "block",
                "value": [
                    {
                        "name": "group",
                        "type": "string",
                        "value": "group"
                    },
                    {
                        "name": "consumer",
                        "type": "string",
                        "value": "consumer"
                    }
                ]
            },
            {
                "token": "COUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            },
            {
                "token": "BLOCK",
                "name": "milliseconds",
                "type": "integer",
                "value": "milliseconds",
                "optional": true
            },
            {
                "name": "noack",
                "token": "NOACK",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "streams",
                "token": "STREAMS",
                "type": "pure-token"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "name": "ID",
                "type": "string",
                "value": "ID",
                "multiple": true
            }
        ]
    },
    "XREVRANGE": {
        "summary": "Return a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to smaller IDs) compared to XRANGE",
        "complexity": "O(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).",
        "group": "stream",
        "since": "5.0.0",
        "arity": -4,
        "function": "xrevrangeCommand",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "end",
                "type": "string",
                "value": "end"
            },
            {
                "name": "start",
                "type": "string",
                "value": "start"
            },
            {
                "token": "COUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "XSETID": {
        "summary": "An internal command for replicating stream values",
        "complexity": "O(1)",
        "group": "stream",
        "since": "5.0.0",
        "arity": 3,
        "function": "xsetidCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ]
    },
    "XTRIM": {
        "summary": "Trims the stream to (approximately if '~' is passed) a certain size",
        "complexity": "O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.",
        "group": "stream",
        "since": "5.0.0",
        "arity": -4,
        "function": "xtrimCommand",
        "history": [
            [
                "6.2",
                "Added the `MINID` trimming strategy and the `LIMIT` option."
            ]
        ],
        "command_flags": [
            "write",
            "random"
        ],
        "acl_categories": [
            "stream"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "trim",
                "type": "block",
                "value": [
                    {
                        "name": "strategy",
                        "type": "oneof",
                        "value": [
                            {
                                "name": "maxlen",
                                "type": "pure-token",
                                "token": "MAXLEN"
                            },
                            {
                                "name": "minid",
                                "type": "pure-token",
                                "token": "MINID"
                            }
                        ]
                    },
                    {
                        "name": "operator",
                        "type": "oneof",
                        "value": [
                            {
                                "name": "equal",
                                "type": "pure-token",
                                "token": "="
                            },
                            {
                                "name": "approximately",
                                "type": "pure-token",
                                "token": "~"
                            }
                        ],
                        "optional": true
                    },
                    {
                        "name": "threshold",
                        "type": "string",
                        "value": "threshold"
                    },
                    {
                        "token": "LIMIT",
                        "name": "count",
                        "type": "integer",
                        "value": "count",
                        "optional": true
                    }
                ]
            }
        ]
    },
    "ZADD": {
        "summary": "Add one or more members to a sorted set, or update its score if it already exists",
        "complexity": "O(log(N)) for each item added, where N is the number of elements in the sorted set.",
        "group": "sorted_set",
        "since": "1.2.0",
        "arity": -4,
        "function": "zaddCommand",
        "history": [
            [
                "2.4",
                "Accepts multiple elements."
            ],
            [
                "3.0.2",
                "Added the `XX`, `NX`, `CH` and `INCR` options."
            ],
            [
                "6.2",
                "Added the `GT` and `LT` options."
            ]
        ],
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "condition",
                "type": "oneof",
                "value": [
                    {
                        "name": "nx",
                        "type": "pure-token",
                        "token": "NX"
                    },
                    {
                        "name": "xx",
                        "type": "pure-token",
                        "token": "XX"
                    }
                ],
                "optional": true
            },
            {
                "name": "comparison",
                "type": "oneof",
                "value": [
                    {
                        "name": "gt",
                        "type": "pure-token",
                        "token": "GT"
                    },
                    {
                        "name": "lt",
                        "type": "pure-token",
                        "token": "LT"
                    }
                ],
                "optional": true
            },
            {
                "name": "change",
                "token": "CH",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "increment",
                "token": "INCR",
                "type": "pure-token",
                "optional": true
            },
            {
                "name": "score_member",
                "type": "block",
                "value": [
                    {
                        "name": "score",
                        "type": "double",
                        "value": "score"
                    },
                    {
                        "name": "member",
                        "type": "string",
                        "value": "member"
                    }
                ],
                "multiple": true
            }
        ]
    },
    "ZCARD": {
        "summary": "Get the number of members in a sorted set",
        "complexity": "O(1)",
        "group": "sorted_set",
        "since": "1.2.0",
        "arity": 2,
        "function": "zcardCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            }
        ]
    },
    "ZCOUNT": {
        "summary": "Count the members in a sorted set with scores within the given values",
        "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
        "group": "sorted_set",
        "since": "2.0.0",
        "arity": 4,
        "function": "zcountCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "min",
                "type": "double",
                "value": "min"
            },
            {
                "name": "max",
                "type": "double",
                "value": "max"
            }
        ]
    },
    "ZDIFF": {
        "summary": "Subtract multiple sorted sets",
        "complexity": "O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.",
        "group": "sorted_set",
        "since": "6.2.0",
        "arity": -3,
        "function": "zdiffCommand",
        "get_keys_function": "zunionInterDiffGetKeys",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "name": "withscores",
                "token": "WITHSCORES",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "ZDIFFSTORE": {
        "summary": "Subtract multiple sorted sets and store the resulting sorted set in a new key",
        "complexity": "O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.",
        "group": "sorted_set",
        "since": "6.2.0",
        "arity": -4,
        "function": "zdiffstoreCommand",
        "get_keys_function": "zunionInterDiffStoreGetKeys",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 0
            },
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 1,
                "multiple": true
            }
        ]
    },
    "ZINCRBY": {
        "summary": "Increment the score of a member in a sorted set",
        "complexity": "O(log(N)) where N is the number of elements in the sorted set.",
        "group": "sorted_set",
        "since": "1.2.0",
        "arity": 4,
        "function": "zincrbyCommand",
        "command_flags": [
            "write",
            "denyoom",
            "fast"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "increment",
                "type": "integer",
                "value": "increment"
            },
            {
                "name": "member",
                "type": "string",
                "value": "member"
            }
        ]
    },
    "ZINTER": {
        "summary": "Intersect multiple sorted sets",
        "complexity": "O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.",
        "group": "sorted_set",
        "since": "6.2.0",
        "arity": -3,
        "function": "zinterCommand",
        "get_keys_function": "zunionInterDiffGetKeys",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "token": "WEIGHTS",
                "name": "weight",
                "type": "integer",
                "value": "weight",
                "optional": true,
                "multiple": true
            },
            {
                "token": "AGGREGATE",
                "name": "aggregate",
                "type": "oneof",
                "value": [
                    {
                        "name": "sum",
                        "type": "pure-token",
                        "token": "SUM"
                    },
                    {
                        "name": "min",
                        "type": "pure-token",
                        "token": "MIN"
                    },
                    {
                        "name": "max",
                        "type": "pure-token",
                        "token": "MAX"
                    }
                ],
                "optional": true
            },
            {
                "name": "withscores",
                "token": "WITHSCORES",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "ZINTERCARD": {
        "summary": "Intersect multiple sorted sets and return the cardinality of the result",
        "complexity": "O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.",
        "group": "sorted_set",
        "since": "7.0.0",
        "arity": -3,
        "function": "zinterCardCommand",
        "get_keys_function": "zunionInterDiffGetKeys",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "token": "LIMIT",
                "name": "limit",
                "type": "integer",
                "value": "limit",
                "optional": true
            }
        ]
    },
    "ZINTERSTORE": {
        "summary": "Intersect multiple sorted sets and store the resulting sorted set in a new key",
        "complexity": "O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.",
        "group": "sorted_set",
        "since": "2.0.0",
        "arity": -4,
        "function": "zinterstoreCommand",
        "get_keys_function": "zunionInterDiffStoreGetKeys",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 0
            },
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 1,
                "multiple": true
            },
            {
                "token": "WEIGHTS",
                "name": "weight",
                "type": "integer",
                "value": "weight",
                "optional": true,
                "multiple": true
            },
            {
                "token": "AGGREGATE",
                "name": "aggregate",
                "type": "oneof",
                "value": [
                    {
                        "name": "sum",
                        "type": "pure-token",
                        "token": "SUM"
                    },
                    {
                        "name": "min",
                        "type": "pure-token",
                        "token": "MIN"
                    },
                    {
                        "name": "max",
                        "type": "pure-token",
                        "token": "MAX"
                    }
                ],
                "optional": true
            }
        ]
    },
    "ZLEXCOUNT": {
        "summary": "Count the number of members in a sorted set between a given lexicographical range",
        "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
        "group": "sorted_set",
        "since": "2.8.9",
        "arity": 4,
        "function": "zlexcountCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "min",
                "type": "string",
                "value": "min"
            },
            {
                "name": "max",
                "type": "string",
                "value": "max"
            }
        ]
    },
    "ZMPOP": {
        "summary": "Remove and return members with scores in a sorted set",
        "complexity": "O(K) + O(N*log(M)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.",
        "group": "sorted_set",
        "since": "7.0.0",
        "arity": -4,
        "function": "zmpopCommand",
        "get_keys_function": "zmpopGetKeys",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "name": "where",
                "type": "oneof",
                "value": [
                    {
                        "name": "min",
                        "type": "pure-token",
                        "token": "MIN"
                    },
                    {
                        "name": "max",
                        "type": "pure-token",
                        "token": "MAX"
                    }
                ]
            },
            {
                "token": "COUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "ZMSCORE": {
        "summary": "Get the score associated with the given members in a sorted set",
        "complexity": "O(N) where N is the number of members being requested.",
        "group": "sorted_set",
        "since": "6.2.0",
        "arity": -3,
        "function": "zmscoreCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "member",
                "type": "string",
                "value": "member",
                "multiple": true
            }
        ]
    },
    "ZPOPMAX": {
        "summary": "Remove and return members with the highest scores in a sorted set",
        "complexity": "O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.",
        "group": "sorted_set",
        "since": "5.0.0",
        "arity": -2,
        "function": "zpopmaxCommand",
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "ZPOPMIN": {
        "summary": "Remove and return members with the lowest scores in a sorted set",
        "complexity": "O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.",
        "group": "sorted_set",
        "since": "5.0.0",
        "arity": -2,
        "function": "zpopminCommand",
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "ZRANDMEMBER": {
        "summary": "Get one or multiple random elements from a sorted set",
        "complexity": "O(N) where N is the number of elements returned",
        "group": "sorted_set",
        "since": "6.2.0",
        "arity": -2,
        "function": "zrandmemberCommand",
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "options",
                "type": "block",
                "value": [
                    {
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    },
                    {
                        "name": "withscores",
                        "token": "WITHSCORES",
                        "type": "pure-token",
                        "optional": true
                    }
                ],
                "optional": true
            }
        ]
    },
    "ZRANGE": {
        "summary": "Return a range of members in a sorted set",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.",
        "group": "sorted_set",
        "since": "1.2.0",
        "arity": -4,
        "function": "zrangeCommand",
        "history": [
            [
                "6.2",
                "Added the `REV`, `BYSCORE`, `BYLEX` and `LIMIT` options."
            ]
        ],
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "min",
                "type": "string",
                "value": "min"
            },
            {
                "name": "max",
                "type": "string",
                "value": "max"
            },
            {
                "name": "sortby",
                "type": "oneof",
                "value": [
                    {
                        "name": "byscore",
                        "type": "pure-token",
                        "token": "BYSCORE"
                    },
                    {
                        "name": "bylex",
                        "type": "pure-token",
                        "token": "BYLEX"
                    }
                ],
                "optional": true
            },
            {
                "name": "rev",
                "token": "REV",
                "type": "pure-token",
                "optional": true
            },
            {
                "token": "LIMIT",
                "name": "offset_count",
                "type": "block",
                "value": [
                    {
                        "name": "offset",
                        "type": "integer",
                        "value": "offset"
                    },
                    {
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    }
                ],
                "optional": true
            },
            {
                "name": "withscores",
                "token": "WITHSCORES",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "ZRANGEBYLEX": {
        "summary": "Return a range of members in a sorted set, by lexicographical range",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
        "group": "sorted_set",
        "since": "2.8.9",
        "arity": -4,
        "function": "zrangebylexCommand",
        "deprecated_since": "6.2.0",
        "replaced_by": "`ZRANGE` with the `BYSCORE` argument",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "min",
                "type": "string",
                "value": "min"
            },
            {
                "name": "max",
                "type": "string",
                "value": "max"
            },
            {
                "token": "LIMIT",
                "name": "offset_count",
                "type": "block",
                "value": [
                    {
                        "name": "offset",
                        "type": "integer",
                        "value": "offset"
                    },
                    {
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    }
                ],
                "optional": true
            }
        ]
    },
    "ZRANGEBYSCORE": {
        "summary": "Return a range of members in a sorted set, by score",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
        "group": "sorted_set",
        "since": "1.0.5",
        "arity": -4,
        "function": "zrangebyscoreCommand",
        "deprecated_since": "6.2.0",
        "replaced_by": "`ZRANGE` with the `BYSCORE` argument",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "min",
                "type": "double",
                "value": "min"
            },
            {
                "name": "max",
                "type": "double",
                "value": "max"
            },
            {
                "name": "withscores",
                "token": "WITHSCORES",
                "type": "pure-token",
                "optional": true
            },
            {
                "token": "LIMIT",
                "name": "offset_count",
                "type": "block",
                "value": [
                    {
                        "name": "offset",
                        "type": "integer",
                        "value": "offset"
                    },
                    {
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    }
                ],
                "optional": true
            }
        ]
    },
    "ZRANGESTORE": {
        "summary": "Store a range of members from sorted set into another key",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.",
        "group": "sorted_set",
        "since": "6.2.0",
        "arity": -5,
        "function": "zrangestoreCommand",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "dst",
                "type": "key",
                "value": "dst",
                "key_spec_index": 0
            },
            {
                "name": "src",
                "type": "key",
                "value": "src",
                "key_spec_index": 1
            },
            {
                "name": "min",
                "type": "string",
                "value": "min"
            },
            {
                "name": "max",
                "type": "string",
                "value": "max"
            },
            {
                "name": "sortby",
                "type": "oneof",
                "value": [
                    {
                        "name": "byscore",
                        "type": "pure-token",
                        "token": "BYSCORE"
                    },
                    {
                        "name": "bylex",
                        "type": "pure-token",
                        "token": "BYLEX"
                    }
                ],
                "optional": true
            },
            {
                "name": "rev",
                "token": "REV",
                "type": "pure-token",
                "optional": true
            },
            {
                "token": "LIMIT",
                "name": "offset_count",
                "type": "block",
                "value": [
                    {
                        "name": "offset",
                        "type": "integer",
                        "value": "offset"
                    },
                    {
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    }
                ],
                "optional": true
            }
        ]
    },
    "ZRANK": {
        "summary": "Determine the index of a member in a sorted set",
        "complexity": "O(log(N))",
        "group": "sorted_set",
        "since": "2.0.0",
        "arity": 3,
        "function": "zrankCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "member",
                "type": "string",
                "value": "member"
            }
        ]
    },
    "ZREMRANGEBYLEX": {
        "summary": "Remove all members in a sorted set between the given lexicographical range",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.",
        "group": "sorted_set",
        "since": "2.8.9",
        "arity": 4,
        "function": "zremrangebylexCommand",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "min",
                "type": "string",
                "value": "min"
            },
            {
                "name": "max",
                "type": "string",
                "value": "max"
            }
        ]
    },
    "ZREM": {
        "summary": "Remove one or more members from a sorted set",
        "complexity": "O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.",
        "group": "sorted_set",
        "since": "1.2.0",
        "arity": -3,
        "function": "zremCommand",
        "history": [
            [
                "2.4",
                "Accepts multiple elements."
            ]
        ],
        "command_flags": [
            "write",
            "fast"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "member",
                "type": "string",
                "value": "member",
                "multiple": true
            }
        ]
    },
    "ZREMRANGEBYSCORE": {
        "summary": "Remove all members in a sorted set within the given scores",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.",
        "group": "sorted_set",
        "since": "1.2.0",
        "arity": 4,
        "function": "zremrangebyscoreCommand",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "min",
                "type": "double",
                "value": "min"
            },
            {
                "name": "max",
                "type": "double",
                "value": "max"
            }
        ]
    },
    "ZREMRANGEBYRANK": {
        "summary": "Remove all members in a sorted set within the given indexes",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.",
        "group": "sorted_set",
        "since": "2.0.0",
        "arity": 4,
        "function": "zremrangebyrankCommand",
        "command_flags": [
            "write"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "start",
                "type": "integer",
                "value": "start"
            },
            {
                "name": "stop",
                "type": "integer",
                "value": "stop"
            }
        ]
    },
    "ZREVRANGE": {
        "summary": "Return a range of members in a sorted set, by index, with scores ordered from high to low",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.",
        "group": "sorted_set",
        "since": "1.2.0",
        "arity": -4,
        "function": "zrevrangeCommand",
        "deprecated_since": "6.2.0",
        "replaced_by": "`ZRANGE` with the `REV` argument",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "start",
                "type": "integer",
                "value": "start"
            },
            {
                "name": "stop",
                "type": "integer",
                "value": "stop"
            },
            {
                "name": "withscores",
                "token": "WITHSCORES",
                "type": "pure-token",
                "optional": true
            }
        ]
    },
    "ZREVRANGEBYLEX": {
        "summary": "Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
        "group": "sorted_set",
        "since": "2.8.9",
        "arity": -4,
        "function": "zrevrangebylexCommand",
        "deprecated_since": "6.2.0",
        "replaced_by": "`ZRANGE` with the `REV` and `BYLEX` arguments",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "max",
                "type": "string",
                "value": "max"
            },
            {
                "name": "min",
                "type": "string",
                "value": "min"
            },
            {
                "token": "LIMIT",
                "name": "offset_count",
                "type": "block",
                "value": [
                    {
                        "name": "offset",
                        "type": "integer",
                        "value": "offset"
                    },
                    {
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    }
                ],
                "optional": true
            }
        ]
    },
    "ZREVRANGEBYSCORE": {
        "summary": "Return a range of members in a sorted set, by score, with scores ordered from high to low",
        "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
        "group": "sorted_set",
        "since": "2.2.0",
        "arity": -4,
        "function": "zrevrangebyscoreCommand",
        "deprecated_since": "6.2.0",
        "replaced_by": "`ZRANGE` with the `REV` and `BYSCORE` arguments",
        "doc_flags": [
            "deprecated"
        ],
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "max",
                "type": "double",
                "value": "max"
            },
            {
                "name": "min",
                "type": "double",
                "value": "min"
            },
            {
                "name": "withscores",
                "token": "WITHSCORES",
                "type": "pure-token",
                "optional": true
            },
            {
                "token": "LIMIT",
                "name": "offset_count",
                "type": "block",
                "value": [
                    {
                        "name": "offset",
                        "type": "integer",
                        "value": "offset"
                    },
                    {
                        "name": "count",
                        "type": "integer",
                        "value": "count"
                    }
                ],
                "optional": true
            }
        ]
    },
    "ZREVRANK": {
        "summary": "Determine the index of a member in a sorted set, with scores ordered from high to low",
        "complexity": "O(log(N))",
        "group": "sorted_set",
        "since": "2.0.0",
        "arity": 3,
        "function": "zrevrankCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "member",
                "type": "string",
                "value": "member"
            }
        ]
    },
    "ZSCAN": {
        "summary": "Incrementally iterate sorted sets elements and associated scores",
        "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..",
        "group": "sorted_set",
        "since": "2.8.0",
        "arity": -3,
        "function": "zscanCommand",
        "command_flags": [
            "readonly",
            "random"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "cursor",
                "type": "integer",
                "value": "cursor"
            },
            {
                "token": "MATCH",
                "name": "pattern",
                "type": "pattern",
                "value": "pattern",
                "optional": true
            },
            {
                "token": "COUNT",
                "name": "count",
                "type": "integer",
                "value": "count",
                "optional": true
            }
        ]
    },
    "ZSCORE": {
        "summary": "Get the score associated with the given member in a sorted set",
        "complexity": "O(1)",
        "group": "sorted_set",
        "since": "1.2.0",
        "arity": 3,
        "function": "zscoreCommand",
        "command_flags": [
            "readonly",
            "fast"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0
            },
            {
                "name": "member",
                "type": "string",
                "value": "member"
            }
        ]
    },
    "ZUNIONSTORE": {
        "summary": "Add multiple sorted sets and store the resulting sorted set in a new key",
        "complexity": "O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.",
        "group": "sorted_set",
        "since": "2.0.0",
        "arity": -4,
        "function": "zunionstoreCommand",
        "get_keys_function": "zunionInterDiffStoreGetKeys",
        "command_flags": [
            "write",
            "denyoom"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "write"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "range": {
                        "lastkey": 0,
                        "step": 1,
                        "limit": 0
                    }
                }
            },
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 2
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "destination",
                "type": "key",
                "value": "destination",
                "key_spec_index": 0
            },
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 1,
                "multiple": true
            },
            {
                "token": "WEIGHTS",
                "name": "weight",
                "type": "integer",
                "value": "weight",
                "optional": true,
                "multiple": true
            },
            {
                "token": "AGGREGATE",
                "name": "aggregate",
                "type": "oneof",
                "value": [
                    {
                        "name": "sum",
                        "type": "pure-token",
                        "token": "SUM"
                    },
                    {
                        "name": "min",
                        "type": "pure-token",
                        "token": "MIN"
                    },
                    {
                        "name": "max",
                        "type": "pure-token",
                        "token": "MAX"
                    }
                ],
                "optional": true
            }
        ]
    },
    "ZUNION": {
        "summary": "Add multiple sorted sets",
        "complexity": "O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.",
        "group": "sorted_set",
        "since": "6.2.0",
        "arity": -3,
        "function": "zunionCommand",
        "get_keys_function": "zunionInterDiffGetKeys",
        "command_flags": [
            "readonly"
        ],
        "acl_categories": [
            "sortedset"
        ],
        "key_specs": [
            {
                "flags": [
                    "read"
                ],
                "begin_search": {
                    "index": {
                        "pos": 1
                    }
                },
                "find_keys": {
                    "keynum": {
                        "keynumidx": 0,
                        "firstkey": 1,
                        "step": 1
                    }
                }
            }
        ],
        "arguments": [
            {
                "name": "numkeys",
                "type": "integer",
                "value": "numkeys"
            },
            {
                "name": "key",
                "type": "key",
                "value": "key",
                "key_spec_index": 0,
                "multiple": true
            },
            {
                "token": "WEIGHTS",
                "name": "weight",
                "type": "integer",
                "value": "weight",
                "optional": true,
                "multiple": true
            },
            {
                "token": "AGGREGATE",
                "name": "aggregate",
                "type": "oneof",
                "value": [
                    {
                        "name": "sum",
                        "type": "pure-token",
                        "token": "SUM"
                    },
                    {
                        "name": "min",
                        "type": "pure-token",
                        "token": "MIN"
                    },
                    {
                        "name": "max",
                        "type": "pure-token",
                        "token": "MAX"
                    }
                ],
                "optional": true
            },
            {
                "name": "withscores",
                "token": "WITHSCORES",
                "type": "pure-token",
                "optional": true
            }
        ]
    }
}